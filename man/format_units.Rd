% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_units.R
\name{format_units}
\alias{format_units}
\title{Format numbers with measurement units}
\usage{
format_units(
  x,
  digits = NULL,
  unit = NULL,
  ...,
  unit_form = NULL,
  size = NULL,
  delim = NULL,
  big_mark = NULL,
  decimal_mark = NULL
)
}
\arguments{
\item{x}{Vector of class numeric or class units.}

\item{digits}{Integer scalar from 1 through 20 that controls the number of
significant digits in printed numeric values; see \code{signif()}. Default is 4.}

\item{unit}{Character scalar, units label compatible with 'units' package.
For \code{x} class numeric, transform to class units in \code{unit} measurement
units. For \code{x} class units, convert to \code{unit} measurement units. If empty,
existing class units retained.}

\item{...}{Not used, force later arguments to be used by name.}

\item{unit_form}{Character scalar. Possible values are "standard" (default)
and "implicit" (implicit exponent form). In standard form, units are
related with arithmetic symbols for multiplication, division, and powers,
e.g., \code{"kg/m^3"} or \code{"W/(m*K)"}. In implicit exponent form, symbols are
separated by spaces and numbers represent exponents, e.g., \code{"kg m-3"} or
\code{"W m-1 K-1"}.}

\item{size}{Font size. Possible values are "scriptsize", "small" (default),
"normalsize", "large", and "huge", which correspond to selected LaTeX font
size values.}

\item{delim}{Character vector of length one or two defining the math markup
delimiters. Possible values include \code{c("$", "$")} or \code{c("\\\\(", "\\\\)")}.
Alternatively, one can use \code{"$"} (default) or \code{"\\\\("}, both of which
create appropriate left and right delimiters. If required by one's markup
environment, custom 2-element (left and right) delimiters can be assigned.}

\item{big_mark}{Character. Possible values are empty (\code{""}, default) or
"thin" to produce a LaTeX-style thin space (\code{"\\\\\\\\,"}) to separate numbers
into groups of three to the left of the decimal mark; applied as the
\code{big.mark} argument of \code{formatC()}.}

\item{decimal_mark}{Character. Possible values are a period (\code{"."}, default)
or a comma (\code{","}) to denote the numeric decimal point; applied as the
\code{decimal.mark} argument of \code{formatC()}.}
}
\value{
A character vector of numbers with appended measurement units.
}
\description{
Format a vector of numbers with measurement units appended via the 'units'
R package and convert to character strings within math delimiters for
rendering in an R Markdown document.
}
\details{
This function is a wrapper for \code{\link[units:units]{units::as_units()}} and \code{\link[base:format]{base::format()}}.
Numeric class input is converted to units class. Units class input, if
convertible, is converted to the specified measurement units; if none are
specified, the existing measurement units are retained. The result in all
cases is converted to class character using \code{base::format()} with preset
arguments: \code{trim = TRUE} and \code{scientific = FALSE}. The output has the form
\code{"a [u]"}, where \code{a} is the number in decimal notation and \code{u} is a
measurement units label.
}
\examples{
# Scalar value, class numeric
# x <- 101300
# format_units(x, unit = "Pa")
#
# # Scalar value, class units
# x <- 101300
# units(x) <- "Pa"
# format_units(x, unit = "hPa")
# format_units(x, digits = 3, unit = "psi")
#
# # Vectors (atmos and metals data included in formatdown)
# x <- atmos$dens
# units(x) <- "kg/m^3"
# format_units(x, unit = "g/m^3")
# format_units(x, unit = "g/m^3", unit_form = "implicit")
#
# x <- atmos$pres
# units(x) <- "Pa"
# format_units(x, big_mark = ",")
# format_units(x, unit = "hPa")
#
# x <- metals$thrm_cond
# units(x) <- "W m-1 K-1"
# format_units(x, digits = 2)
# format_units(x, digits = 2, unit_form = "implicit")

}
\seealso{
Other format_*: 
\code{\link{format_dcml}()},
\code{\link{format_engr}()},
\code{\link{format_numbers}()},
\code{\link{format_sci}()},
\code{\link{format_text}()}
}
\concept{format_*}
