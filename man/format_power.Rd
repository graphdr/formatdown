% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_power.R
\name{format_power}
\alias{format_power}
\title{Format powers of ten}
\usage{
format_power(x, digits = 3, ..., format = "engr", limits = c(0.1, 1000))
}
\arguments{
\item{x}{Numeric vector to be formatted.}

\item{digits}{Numeric scalar, nonzero positive integer to specify the
number of significant digits in the output coefficient.}

\item{...}{Not used, force later arguments to be used by name.}

\item{format}{Character. Possible values are "engr" (engineering notation)
and "sci" (scientific notation). Use by name.}

\item{limits}{Numeric vector, length two, specifying the range over which
power of ten notation is disabled and numbers are represented
in decimal notation. Use by name.}
}
\value{
A character vector with the following properties:
\itemize{
    \item Numbers within the \code{limits} range represented in decimal
          notation; all others represented in powers of ten notation.
    \item Elements delimited with \code{$...$} for rendering as
          inline math in an R Markdown or Quarto Markdown document.
}
}
\description{
Convert the elements of a numerical vector to character strings in which
the numbers are formatted using powers-of-ten notation in scientific or
engineering form and delimited for rendering as inline equations in an
R Markdown document.
}
\details{
Given a number, a numerical vector, or a numerical column from a data frame,
\code{format_power()} converts the numbers to character strings of the form,
\code{"$a\\\\times{10}^{n}$"}, where \code{a} is the coefficient and \code{n}
is the exponent. The string includes markup delimiters \code{$...$} for
rendering the result as an inline equation in R Markdown of Quarto Markdown
document. The user can specify the number of significant digits, scientific
or engineering format, and the range over which decimal notation is enforced.
}
\examples{
# Scalar value
format_power(101100)

# Vector value
x <- c(1.2222e-6, 2.3333e-5, 3.4444e-4, 4.1111e-3, 5.2222e-2, 6.3333e-1,
       7.4444e+0, 8.1111e+1, 9.2222e+2, 1.3333e+3, 2.4444e+4, 3.1111e+5, 4.2222e+6)
format_power(x)

# Compare significant digits
format_power(x[1], 3)
format_power(x[1], 4)

# Compare format type
format_power(x[3], format = "engr")
format_power(x[3], format = "sci")

# Compare change to limits
format_power(x[6], limits = c(0.1, 1000))
format_power(x[6], limits = c(1, 1000))

# Apply to columns of a data frame (data.table syntax)
y <- x[1:6]
z <- x[8:13]
DT <- data.table::data.table(y, z)
DT[, lapply(.SD, function(x) format_power(x))]
}
\concept{format_*}
