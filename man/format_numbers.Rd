% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_numbers.R
\name{format_numbers}
\alias{format_numbers}
\title{Format numbers}
\usage{
format_numbers(
  x,
  digits = 4,
  format = "engr",
  ...,
  omit_power = c(-1, 2),
  set_power = NULL,
  size = formatdown_options("size"),
  delim = formatdown_options("delim"),
  decimal_mark = formatdown_options("decimal_mark"),
  big_mark = formatdown_options("big_mark"),
  small_mark = formatdown_options("small_mark")
)
}
\arguments{
\item{x}{Numerical vector to be formatted. Can be a scalar, a vector, or a
column from a data frame. Ca include NA elements.}

\item{digits}{Integer scalar from 1 through 20 that controls the number of
significant digits in printed numeric values; see \code{signif()}. Default is 4.}

\item{format}{Type of notation. Possible values are "engr" (default) for
engineering power-of-ten notation, "sci" for scientific power-of-ten
notation, and "dcml" for decimal notation.}

\item{...}{Not used for values, forces subsequent arguments to be referable
only by name.}

\item{omit_power}{Numeric vector \code{c(p, q)} with \code{p <= q}, specifying the
range of exponents over which power-of-ten notation is omitted in either
scientific or engineering power-of-ten format. Default is \code{c(-1, 2)}. If a
single value is assigned, i.e., \code{omit_power = p}, the argument is
interpreted as \code{c(p, p)}. If \code{NULL} or \code{NA}, all elements are formatted in
power-of-ten notation. Argument is overridden by a non-empty \code{set_power}
or if decimal notation is specified (\code{format = "dcml"}).}

\item{set_power}{Integer scalar. Formats all values in \code{x} with the same
power-of-ten exponent. Default NULL. Assigning a value to set_power
overrides \code{format} and \code{omit_power} arguments.}

\item{size, delim, decimal_mark, big_mark, small_mark}{Formatting options. For
details, see the help page for \code{formatdown_options()}.}
}
\value{
A character vector with the following properties:
\itemize{
\item Numbers represented in powers of ten notation or decimal notation.
\item Elements delimited as inline math markup.
}
}
\description{
Convert a numeric vector to a character vector in which the numbers are
formatted in power-of-ten notation in scientific or engineering form and
delimited for rendering as inline equations in an R markdown document.
Decimal numbers can be similarly formatted, without the power-of-ten
notation.
}
\details{
Given a number, a numerical vector, or a numerical column from a data frame,
\code{format_numbers()} converts the numbers to character strings of the form,
\code{"$a \\\\times 10^{n}$"}, where \code{a} is the coefficient to a specified
number of significant digits and \code{n} is the exponent. When used for decimal
notation, \code{format_numbers()} converts numbers to character strings of the
form \code{"$a$"}. All strings include markup delimiters \verb{$...$} for rendering
(in an R markdown or Quarto markdown document) as an inline equation.

Powers-of-ten notation is omitted over a range of exponents via \code{omit_power}
such that numbers so specified are converted to decimal notation. For
example, the default \code{omit_power = c(-1, 2)} formats numbers such as 0.123,
1.23, 12.3, and 123 in decimal form. To cancel these exceptions and convert
all numbers to powers-of-ten notation, set the \code{omit_power} argument to NULL
or NA.

Delimiters for inline math markup can be edited if necessary. If the default
argument fails, try using \code{"\\\\("} as an alternative. If using a custom
delimiter to suit the markup environment, be sure to escape all special
symbols.

Arguments after the dots (\code{...}) must be referred to by name.
}
\examples{
# Scalar value
format_numbers(101100, digits = 4)

# Vector value
x <- c(1.2222e-6, 2.3333e-5, 3.4444e-4, 4.1111e-3, 5.2222e-2, 6.3333e-1,
       7.4444e+0, 8.1111e+1, 9.2222e+2, 1.3333e+3, 2.4444e+4, 3.1111e+5, 4.2222e+6)
format_numbers(x)

# Compare significant digits
format_numbers(x[1], 3)
format_numbers(x[1], 4)

# Compare format type
format_numbers(x[3], format = "dcml")
format_numbers(x[3], format = "sci")
format_numbers(x[3], format = "engr")

# Compare set_power results
format_numbers(x[3], set_power = -5)
format_numbers(x[3], set_power = -4)
format_numbers(x[3], set_power = -3)

# Compare omit_power range
format_numbers(x[6], omit_power = c(-1, 2))
format_numbers(x[6], omit_power = c(0, 2))
format_numbers(x[8])
format_numbers(x[8], omit_power = c(-Inf, Inf))
format_numbers(x[8], omit_power = NULL)

# Apply to columns of a data frame
y <- x[1:6]
z <- x[8:13]
df <- data.frame(y, z)
apply(df, 2, format_numbers, digits = 3)

# Convenience functions
format_dcml(x[11], 3)
format_sci(x[11], 3)
format_engr(x[11], 3)

# With digit grouping
format_numbers(x[11], 3, "dcml", big_mark = "\\\\\\\\,")
format_numbers(x[1], 3, "dcml", small_mark = "\\\\\\\\,")
}
\seealso{
Other format_*: 
\code{\link{format_dcml}()},
\code{\link{format_engr}()},
\code{\link{format_sci}()},
\code{\link{format_text}()},
\code{\link{format_units}()}
}
\concept{format_*}
