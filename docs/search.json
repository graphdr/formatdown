[{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"types-of-notation","dir":"Articles","previous_headings":"","what":"Types of notation","title":"Format numbers","text":"Notation represent large small numbers depends mode communication. computer script, example, might encode Avogadro constant N_A = 6.0221*10^23. asterisk (*) caret (^) expression, however, communicate instructions computer, syntactical mathematics. scientific E-notation (6.0221E+23) currency discourse communities, power--ten notation, e.g., \\(\\small N_A = 6.0221 \\times 10^{23}\\), conventional format professional technical communication. Power--ten notation expressed, \\[ \\small \\times 10^n, \\] \\(\\small \\) coefficient decimal form exponent \\(\\small n\\) integer. Two formats common use (Chase, 2021, pp. 63–67): scientific:   \\(\\small 1\\leq{||} < 10\\), e.g., \\(\\small N_A =\\) \\(\\small 6.0221 \\times 10^{23}\\). engineering:   \\(\\small  1\\leq{||} < 1000\\) \\(\\small n\\) multiple 3, e.g., \\(\\small N_A =\\) \\(\\small 602.21 \\times 10^{21}\\). utility engineering form follows SI prefixes physical units “mega-”, “kilo-”, “milli-”, etc., corresponding powers 10 integer multiples three.  Notes syntax.   Programming symbols necessarily mathematical symbols: asterisk (*). Programming symbol multiplication, e.g., x = * b y = * (b + c). grammar mathematics, multiplication indicated symbol (\\(\\times\\)) needed. caret (^). Programming symbol exponentiation, e.g., x = y^2 z = 10^-3. grammar mathematics, exponents typeset superscripts, e.g., \\(\\small x = y^2\\) \\(\\small z = 10^{-3}\\). multiplication (\\(\\small\\times\\)). Mathematical symbol multiplication, confused letter “x”. Generally omitted meaning clear, e.g., \\(\\small x=ab\\) \\(\\small y=(b+c)\\), conventionally included power--ten notation, e.g., \\(\\small 6.0221 \\times 10^{23}\\). comma used decimal marker, multiplication may indicated half-high dot, e.g., \\(\\small 6,0221 \\cdot 10^{23}\\).  Decimal subsets.   vector numbers formatted power--ten form, decimal form may preferred subset values exponents near zero, e.g., \\(\\small n \\\\{-1, 0, 1, 2\\}\\). Decimal form may preferred subset  Decimal columns.   table numeric information can include columns formatted power--ten notation decimal notation. example, table atmospheric properties shown altitude integer form, temperature decimal form, density power--ten engineering notation (except values exponents near zero). Properties atmosphere purpose decimal format formatdown match font face size decimal columns power--ten columns. power--ten columns used, course, decimal columns can displayed -formatted using R tools.  Packages.   writing script follow along, use following packages vignette. Data frame operations performed data.table syntax. users may wish translate examples use base R dplyr syntax.","code":"library(\"formatdown\") library(\"data.table\") library(\"knitr\")"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"markup","dir":"Articles","previous_headings":"","what":"Markup","title":"Format numbers","text":"format numbers inline math expressions delimited $ ... $ optional \\( ... \\). example, Avogadro constant marked \\times macro creates multiplication symbol (\\(\\small\\times\\)). math markup, inline equation R markdown document, renders : \\(\\small 6.0221 \\times 10^{23}\\). program markup, however, enclose quote marks character string, , requires us “escape” backslash \\times adding extra backslash. optional font size argument assigned, formatdown adds LaTeX-style sizing macro \\small \\large, example, markup includes extra backslash.","code":"$6.0221 \\times 10^{23}$, \"$6.0221 \\\\times 10^{23}$\", \"$\\\\small 6.0221 \\\\times 10^{23}$\","},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"format_sci","dir":"Articles","previous_headings":"","what":"format_sci()","title":"Format numbers","text":"Converts numbers character strings power--ten form, \\(\\small \\) coefficient \\(\\small n\\) exponent. format_sci() wrapper general function format_numbers(). subset values exponents near zero, e.g., \\(\\small n \\\\{-1, 0, 1, 2\\}\\), output decimal form,  Usage.   Arguments dots named argument order maintained. Arguments dots (...) must named. arguments assigned via formatdown_options() can reset user locally function call globally using formatdown_options().  Examples.   early examples shown default arguments. Arguments explored fully starting Numeric input section. Examples 1 2 (inline code chunks) render , Avogadro constant \\(\\small L =\\) \\(\\small 6.022 \\times 10^{23}\\) \\(\\small \\mathit{mol}^{-1}\\). elementary charge constant \\(\\small e =\\) \\(\\small 1.602 \\times 10^{-19}\\) \\(\\small C\\).","code":"\"$a \\\\times 10^{n}$\" \"$a$\" format_sci(x,            digits = 4,            ...,            omit_power = c(-1, 2),            set_power = NULL,            delim          = formatdown_options(\"delim\"),            size           = formatdown_options(\"size\"),            decimal_mark   = formatdown_options(\"decimal_mark\"),            small_mark     = formatdown_options(\"small_mark\"),            small_interval = formatdown_options(\"small_interval\"),             whitespace     = formatdown_options(\"whitespace\")) # 1. Avogadro constant L <- 6.0221e+23 format_sci(L) #> [1] \"$6.022 \\\\times 10^{23}$\"  # 2. Elementary charge e <- 1.602176634e-19 format_sci(e) #> [1] \"$1.602 \\\\times 10^{-19}$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"format_engr","dir":"Articles","previous_headings":"","what":"format_engr()","title":"Format numbers","text":"Similar format_sci() except using engineering notation, .e., exponents multiples 3.  Usage.  Examples.   (default arguments) Examples 3 4 render , Avogadro constant \\(\\small L =\\) \\(\\small 602.2 \\times 10^{21}\\) \\(\\small \\mathit{mol}^{-1}\\). elementary charge constant \\(\\small e =\\) \\(\\small 160.2 \\times 10^{-21}\\) \\(\\small C\\).","code":"format_engr(x,             digits = 4,             ...,             omit_power = c(-1, 2),             set_power = NULL,             delim          = formatdown_options(\"delim\"),             size           = formatdown_options(\"size\"),             decimal_mark   = formatdown_options(\"decimal_mark\"),             small_mark     = formatdown_options(\"small_mark\"),             small_interval = formatdown_options(\"small_interval\"),              whitespace     = formatdown_options(\"whitespace\")) # 3. Avogadro constant format_engr(L) #> [1] \"$602.2 \\\\times 10^{21}$\"  # 4. Elementary charge format_engr(e) #> [1] \"$160.2 \\\\times 10^{-21}$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"format_dcml","dir":"Articles","previous_headings":"","what":"format_dcml()","title":"Format numbers","text":"wrapper general function format_numbers(); converts numbers character strings decimal form, \\(\\small \\) decimal value.  Usage.  Examples.   (default arguments) Examples 5 6 render , speed light vacuum \\(\\small c =\\) \\(\\small 299800000\\) \\(\\small\\mathit{m/s}\\). molar gas constant \\(\\small R =\\) \\(\\small 8.314\\) \\(\\small\\mathit{J}\\cdot\\mathit{K}^{-1}\\mathit{mol}^{-1}\\).","code":"\"$a$\" format_dcml(x,             digits = 4,             ...,             size           = formatdown_options(\"size\"),             delim          = formatdown_options(\"delim\"),             decimal_mark   = formatdown_options(\"decimal_mark\"),             big_mark       = formatdown_options(\"big_mark\"),             big_interval   = formatdown_options(\"big_interval\"),             small_mark     = formatdown_options(\"small_mark\"),             small_interval = formatdown_options(\"small_interval\"),              whitespace     = formatdown_options(\"whitespace\")) # 5. Speed of light in a vacuum c <- 299792458 format_dcml(c) #> [1] \"$299800000$\"  # 6. Molar gas constant R <- 8.31446261815324 format_dcml(R) #> [1] \"$8.314$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"format_numbers","dir":"Articles","previous_headings":"","what":"format_numbers()","title":"Format numbers","text":"format_numbers() general-purpose formatting function called format_sci(), format_engr(), format_dcml(). general function can used instead convenience functions simply setting format argument \"sci\", \"engr\" (default), \"dcml\".  Usage. Examples.   Reproducing earlier examples using format_numbers(). Examples 7–9 render , Avogadro constant \\(\\small L =\\) \\(\\small 6.022 \\times 10^{23}\\) \\(\\small \\mathit{mol}^{-1}\\). elementary charge constant \\(\\small e =\\) \\(\\small 160.2 \\times 10^{-21}\\) \\(\\small C\\). molar gas constant \\(\\small R =\\) \\(\\small 8.314\\) \\(\\small\\mathit{J}\\cdot\\mathit{K}^{-1}\\mathit{mol}^{-1}\\).","code":"format_numbers(x,                digits = 4,                format = \"engr\",                ...,                omit_power = c(-1, 2),                set_power = NULL,                delim          = formatdown_options(\"delim\"),                size           = formatdown_options(\"size\"),                decimal_mark   = formatdown_options(\"decimal_mark\"),                big_mark       = formatdown_options(\"big_mark\"),                small_mark     = formatdown_options(\"small_mark\"),                big_interval   = formatdown_options(\"big_interval\"),                small_interval = formatdown_options(\"small_interval\"),                 whitespace     = formatdown_options(\"whitespace\")) # 7. Scientific format_numbers(L, format = \"sci\") #> [1] \"$6.022 \\\\times 10^{23}$\"  # 8. Engineering format_numbers(e, format = \"engr\") #> [1] \"$160.2 \\\\times 10^{-21}$\"  # 9. Decimal format_numbers(R, format = \"dcml\") #> [1] \"$8.314$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"numeric-input","dir":"Articles","previous_headings":"","what":"Numeric input","title":"Format numbers","text":"section begins detailed discussion arguments. Scalar input.   Generally used inline R code. example, following R markdown sentence, includes math markup inline R code, renders : Avogadro constant \\(\\small L =\\) \\(\\small 6.022 \\times 10^{23}\\) \\(\\small\\mathit{mol}^{-1}\\).  Vector.   vector numbers (data frame column) marked follows, table, output renders , Example 10. values exponents \\(\\small n\\\\{-1, 0, 1, 2\\}\\), default format decimal; see Excluding exponents.","code":"The Avogadro constant is $L = $ `r format_sci(L)` $\\mathit{mol}^{-1}$. # 10. Sample vector x <- c(2.3333e-05, 0.00034444, 0.052222, 0.63333, 81.111, 922.22, 24444, 311110,     4222200) format_engr(x) #> [1] \"$23.33 \\\\times 10^{-6}$\" \"$344.4 \\\\times 10^{-6}$\" #> [3] \"$52.22 \\\\times 10^{-3}$\" \"$0.6333$\"                #> [5] \"$81.11$\"                 \"$922.2$\"                 #> [7] \"$24.44 \\\\times 10^{3}$\"  \"$311.1 \\\\times 10^{3}$\"  #> [9] \"$4.222 \\\\times 10^{6}$\" DT <- data.table(x, format_engr(x)) knitr::kable(DT, align = \"r\", col.names = c(\"Unformatted\", \"Engr notation\"), caption = \"Example 10.\")"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"units-input","dir":"Articles","previous_headings":"","what":"Units input","title":"Format numbers","text":"units R package (website: Measurement Units R) provides measurement units R vectors, converting vectors class “numeric” class “units” (Pebesma et al., 2016). example input argument format_numbers() (convenience functions) class “units”, formatdown attempts extract units character string, format number expected way, append units character string result. example, Example 11 renders , \\(\\small 1.032 \\times 10^{4}\\ \\mathrm{m}\\) \\(\\small 1.065 \\times 10^{8}\\ \\mathrm{m^{2}}\\) \\(\\small 1.146 \\times 10^{9}\\ \\mathrm{ft^{2}}\\) complicated units can managed. example Newtonian gravitational constant formatted follows, exponents units definition given “implicit” form, , \\(\\small m^3 kg^{-1} s^{-2}\\) represented \"m3 kg-1 s-2\". Applying similar procedure several physical constants collecting results data frame yields, table constructed simply illustrate formatdown returns variety units-class values units appended formatted number. typical application, however, numbers column physical units formatted vector. example, Example 12.","code":"# Number x <- 10320 class(x) #> [1] \"numeric\"  # Convert to units class units(x) <- \"m\" x #> 10320 [m] class(x) #> [1] \"units\"  # Operations are reflected in the values and its units y <- x^2 y #> 106502400 [m^2]  # Unit conversion is supported z <- y z #> 106502400 [m^2] units(z) <- \"ft^2\" z #> 1146382293 [ft^2] # 11. Units-class inputs format_sci(x) #> [1] \"$1.032 \\\\times 10^{4}\\\\ \\\\mathrm{m}$\" format_sci(y) #> [1] \"$1.065 \\\\times 10^{8}\\\\ \\\\mathrm{m^{2}}$\" format_sci(z) #> [1] \"$1.146 \\\\times 10^{9}\\\\ \\\\mathrm{ft^{2}}$\" G        <- 6.6743e-11     units(G) <- \"m3 kg-1 s-2\"     format_sci(G) # Example 12 DT <- air_meas[, .(temp, pres, sp_gas, dens)]  # Examine data DT[] #>     temp   pres sp_gas  dens #>    <num>  <num>  <int> <num> #> 1: 294.1 101100    287 1.198 #> 2: 294.1 101000    287 1.196 #> 3: 294.6 101100    287 1.196 #> 4: 293.4 101000    287 1.200 #> 5: 293.9 101100    287 1.199  # Assign units units(DT$temp) <- \"K\" units(DT$pres) <- \"Pa\" units(DT$sp_gas) <- \"J kg-1 K-1\" units(DT$dens) <- \"kg m-3\"  # Format one column at a time DT$temp <- format_dcml(DT$temp) DT$pres <- format_engr(DT$pres)  # Or format multiple columns in one pass cols <- c(\"sp_gas\", \"dens\") DT[, (cols) := lapply(.SD, format_dcml), .SDcols = cols]  knitr::kable(DT, align = \"r\", caption = \"Example 12.\")"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"significant-digits","dir":"Articles","previous_headings":"","what":"Significant digits","title":"Format numbers","text":"Significant digits applied input argument using base R function signif() additional formatting applied. example, Example 13 renders , \\(\\small 1.6022 \\times 10^{-19}\\) \\(\\small 1.602 \\times 10^{-19}\\) \\(\\small 1.60 \\times 10^{-19}\\)","code":"# 13. Significant digits format_sci(e, digits = 5) #> [1] \"$1.6022 \\\\times 10^{-19}$\" format_sci(e, digits = 4) #> [1] \"$1.602 \\\\times 10^{-19}$\" format_sci(e, digits = 3) #> [1] \"$1.60 \\\\times 10^{-19}$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"formats","dir":"Articles","previous_headings":"","what":"Formats","title":"Format numbers","text":"format argument appears format_numbers() . default “engr”. format preset format_dcml(), format_engr(), format_sci() convenience functions. compare effects across many orders magnitude, display vector different formats. Example 14. values displayed without powers--ten notation scientific engineering columns determined omit_power argument discussed next.","code":"# 14. Comparing formats x <- c(2.3333e-05, 0.00034444, 0.052222, 0.63333, 81.111, 922.22, 24444, 311110,     4222200) dcml <- format_numbers(x, 3, format = \"dcml\") sci <- format_numbers(x, 3, format = \"sci\") engr <- format_numbers(x, 3, format = \"engr\") DT <- data.table(dcml, sci, engr) knitr::kable(DT, align = \"r\", col.names = c(\"decimal\", \"scientific\", \"engineering\"),     caption = \"Example 14.\")"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"excluding-exponents","dir":"Articles","previous_headings":"","what":"Excluding a range of exponents","title":"Format numbers","text":"specifying power--ten notation, numbers exponents lying within range omit_power argument typeset decimal form. engineering notation, exponent checked lying within range conversion multiple--3 exponents. illustrate, compare two omit_power settings scientific engineering formats. columns, set omit_power = NULL, imposes power--ten notation entire vector. Example 15. Comments: “scientific omit” column, three values \\(\\small (0.184, 1.05, 5.22)\\) decimal form exponents lie within omit_power range \\(\\small \\{-1, 0\\}\\). true “engineering omit” column exponents omit range converting engineering form. “engineering omit” column also displays values \\((\\small 22, 80, 287)\\) decimal form exponents omit range converting engineering notation.  single value assigned, e.g., omit_power = 0, argument interpreted c(0, 0). Example 16.  Setting omit_power = c(-Inf, Inf) yields decimal result format = \"dcml\" overrides format setting. example, Example 17 (cases) renders , \\(\\small 0.00678\\)","code":"# 15. Effects of omit_power DT <- atmos[3:12, .(pres)] DT[, sci_all := format_sci(pres, 3, omit_power = NULL)] DT[, sci_omit := format_sci(pres, 3, omit_power = c(-1, 0))] DT[, engr_all := format_engr(pres, 3, omit_power = NULL)] DT[, engr_omit := format_engr(pres, 3, omit_power = c(-1, 0))] knitr::kable(DT, align = \"r\", col.names = c(\"Unformatted\", \"all scientific\", \"scientific w/ omit\",     \"all engineering\", \"engineering w/ omit\"), caption = \"Example 15.\") # 16. Omit power used for a single value of exponent DT <- atmos[3:12, .(pres)] DT[, sci_all := format_sci(pres, 3, omit_power = NULL)] DT[, sci_omit := format_sci(pres, 3, omit_power = 0)] DT[, engr_all := format_engr(pres, 3, omit_power = NULL)] DT[, engr_omit := format_engr(pres, 3, omit_power = 0)] knitr::kable(DT, align = \"r\", col.names = c(\"Unformatted\", \"all scientific\", \"scientific w/ omit\",     \"all engineering\", \"engineering w/ omit\"), caption = \"Example 16.\") # 17. Different ways of creating a decimal format (y <- 0.00678) #> [1] 0.00678  (p <- format_numbers(y, 3, \"sci\", omit_power = c(-Inf, Inf))) #> [1] \"$0.00678$\"  (q <- format_numbers(y, 3, \"dcml\")) #> [1] \"$0.00678$\"  (r <- format_dcml(y, 3)) #> [1] \"$0.00678$\"  all.equal(p, q) #> [1] TRUE all.equal(p, r) #> [1] TRUE"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"enforcing-exponent","dir":"Articles","previous_headings":"","what":"Enforcing a specific exponent","title":"Format numbers","text":"values table column span orders magnitude, audience sometimes better served setting notation constant power ten. example, show numbers scientific format compare columns exponents set fixed values. Assigning value set_power overrides omit_power format. Example 18.","code":"# 18. set_power argument DT <- atmos[alt <= 40, .(alt, pres, dens)] DT[, sci_pres := format_sci(pres, 3, omit_power = c(-1, 2))] DT[, set_pres := format_sci(pres, 3, omit_power = c(-1, 2), set_power = 3)] DT[, sci_dens := format_engr(dens, 3, omit_power = c(-1, 2))] DT[, set_dens := format_engr(dens, 3, omit_power = c(-1, 2), set_power = -2)] DT[, pres := NULL] DT[, dens := NULL] knitr::kable(DT, align = \"r\", col.names = c(\"Altitude (km)\", \"Pressure (Pa)\", \"with set_power\",     \"Density (kg/m$^{3}$)\", \"with set_power\"), caption = \"Example 18.\")"},{"path":"https://graphdr.github.io/formatdown/articles/format_numbers.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"Format numbers","text":"Arguments assigned using formatdown_options() described Global settings article.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"markup","dir":"Articles","previous_headings":"","what":"Markup","title":"Format text","text":"format values inline math expressions delimited $ ... $ optional \\( ... \\). Inside math delimiters, text formatted using math-text macros \\mathrm, \\mathit, etc. example, text “Hello world!” marked follows, space words preserved horizontal space macro (\\>), rendered R markdown document : \\(\\small\\mathrm{Hello\\>world!}\\). program markup, however, enclose markup quote marks character string, , extra backslashes necessary “escape” backslashes \\mathrm \\>. optional font size argument assigned, formatdown adds LaTeX-style sizing macro \\small \\large, example, markup includes extra backslash.","code":"$\\mathrm{Hello\\>world!}$ \"$\\\\mathrm{Hello\\\\>world!}$\" \"$\\\\small\\\\mathrm{Hello\\\\>world!}$\","},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"format_text","dir":"Articles","previous_headings":"","what":"format_text()","title":"Format text","text":"Converts character vector (vector coercible character class) math-text form, txt text formatted \\\\math** font face macro \\\\mathrm, \\\\mathit, etc.  Usage.   Arguments dots named argument order maintained. Arguments dots (...) must named. arguments assigned via formatdown_options() can reset user locally function call globally using formatdown_options().  Examples.   examples shown default arguments. Arguments explored fully starting next section. Examples 1 2 (inline code chunks) render , \\(\\small \\mathrm{Alum\\ 6061}\\) \\(\\small \\mathrm{Alum\\ 6061}\\), \\(\\small \\mathrm{Carbon\\ steel}\\), \\(\\small \\mathrm{Ni-Cr-Fe\\ alloy}\\)","code":"\"$\\\\math**{txt}$\" format_text(x,             face = \"plain\",             ...,             size = formatdown_options(\"size\"),             delim = formatdown_options(\"delim\"),             whitespace = formatdown_options(\"whitespace\")) # 1. One string x <- \"Alum 6061\" format_text(x) #> [1] \"$\\\\mathrm{Alum\\\\ 6061}$\"  # 2. String vector y <- c(\"Alum 6061\", \"Carbon steel\", \"Ni-Cr-Fe alloy\") format_text(y) #> [1] \"$\\\\mathrm{Alum\\\\ 6061}$\"      \"$\\\\mathrm{Carbon\\\\ steel}$\"   #> [3] \"$\\\\mathrm{Ni-Cr-Fe\\\\ alloy}$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"input-coercible-to-character","dir":"Articles","previous_headings":"","what":"Input coercible to character","title":"Format text","text":"Illustrating variables different classes coerced character possible. Starting character class, Example 3 renders :   \\(\\small \\mathrm{abc}\\), \\(\\small \\mathrm{def}\\), \\(\\small \\mathrm{NA}\\). Example 4 renders :   \\(\\small \\mathrm{10}\\), \\(\\small \\mathrm{3e-05}\\), \\(\\small \\mathrm{4.56e+10}\\). Example 5 renders :   \\(\\small \\mathrm{TRUE}\\). Example 6 renders :   \\(\\small \\mathrm{2+3i}\\). Example 7 renders :   \\(\\small \\mathrm{2024-05-24}\\). Example 8 renders :   \\(\\small \\mathrm{low}\\), \\(\\small \\mathrm{med}\\), \\(\\small \\mathrm{high}\\). Example 9 renders zero-length character (visible output rendered).","code":"# 3. Character class x <- c(\"abc\", \"def\", NA_character_) format_text(x) #> [1] \"$\\\\mathrm{abc}$\" \"$\\\\mathrm{def}$\" \"$\\\\mathrm{NA}$\" # 4. Numeric class x <- c(10, 3e-05, 4.56e+10) format_text(x) #> [1] \"$\\\\mathrm{10}$\"       \"$\\\\mathrm{3e-05}$\"    \"$\\\\mathrm{4.56e+10}$\" # 5. Logical class x <- TRUE format_text(x) #> [1] \"$\\\\mathrm{TRUE}$\" # 6. Complex class x <- 2 + (0+3i) format_text(x) #> [1] \"$\\\\mathrm{2+3i}$\" # 7. Date class x <- Sys.Date() format_text(x) #> [1] \"$\\\\mathrm{2024-05-24}$\" # 8 Factor class x <- as.factor(c(\"low\", \"med\", \"high\")) format_text(x) #> [1] \"$\\\\mathrm{low}$\"  \"$\\\\mathrm{med}$\"  \"$\\\\mathrm{high}$\" # 9. NULL class x <- NULL format_text(x) #> character(0)"},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"typeface","dir":"Articles","previous_headings":"","what":"Typeface","title":"Format text","text":"Format column text using five possible face arguments comparison. Example 10. One may use LaTeX-style macro instead shorthand argument option. example, Example 11 renders : p: \\(\\small \\mathrm{Hello\\ world!}\\) q: \\(\\small \\mathrm{Hello\\ world!}\\)","code":"# 10. Compare available typefaces x <- c(\"One day\", \"at a\", \"time.\") plain <- format_text(x, face = \"plain\", size = \"small\") italic <- format_text(x, face = \"italic\", size = \"small\") bold <- format_text(x, face = \"bold\", size = \"small\") sans <- format_text(x, face = \"sans\", size = \"small\") mono <- format_text(x, face = \"mono\", size = \"small\") DT <- data.table(plain, italic, bold, sans, mono) knitr::kable(DT, align = \"l\", caption = \"Example 10.\") # 11. Two equivalent values for argument hello_text <- \"Hello world!\" p <- format_text(hello_text, face = \"plain\") q <- format_text(hello_text, face = \"\\\\mathrm\")  # Demonstrate equivalence all.equal(p, q) #> [1] TRUE"},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"special-characters-in-math-mode","dir":"Articles","previous_headings":"","what":"Special characters in math mode","title":"Format text","text":"argument format_text() evaluated within math-markup. Thus math syntax text, underscore “_” caret “^”, rendered math mode, verbatim. example, underscore creates subscript caret creates superscript, Example 12 renders : \\(\\small \\mathrm{R_e}\\) \\(\\small \\mathrm{m^3}\\) wanted retain underscore caret characters, can try escape special character use LaTeX verbatim function, Example 13 renders : \\(\\small \\mathrm{R\\_e}\\) \\(\\small \\mathrm{m\\verb+^+3}\\)","code":"# 12. Special characters NOT escaped format_text(\"R_e\") #> [1] \"$\\\\mathrm{R_e}$\" format_text(\"m^3\") #> [1] \"$\\\\mathrm{m^3}$\" # 13. Special characters escaped format_text(\"R\\\\_e\") #> [1] \"$\\\\mathrm{R\\\\_e}$\" format_text(\"m\\\\verb+^+3\") #> [1] \"$\\\\mathrm{m\\\\verb+^+3}$\""},{"path":"https://graphdr.github.io/formatdown/articles/format_text.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"Format text","text":"Arguments assigned using formatdown_options() described Global settings article.","code":""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"formatdown_options","dir":"Articles","previous_headings":"","what":"formatdown_options()","title":"Global settings","text":"Set, examine, reset several global options affect way formatted object rendered R markdown document. options default settings reset formatdown arguments default values:  Usage.   example, get two current settings. Assign new settings; examine result. Reset default values; examine result.","code":"formatdown_options(delim = \"$\",                    size = NULL,                    decimal_mark = \".\",                    big_mark = \"\",                    big_interval = 3,                    small_mark = \"\",                    small_interval = 5,                    whitespace = \"\\\\\\\\>\",                     reset = FALSE) formatdown_options(reset = TRUE) formatdown_options(\"size\", \"decimal_mark\") #> $size #> NULL #>  #> $decimal_mark #> [1] \".\" # Set formatdown_options(size = \"large\", decimal_mark = \",\")  # Examine result formatdown_options(\"size\", \"decimal_mark\") #> $size #> [1] \"large\" #>  #> $decimal_mark #> [1] \",\" # Set to defaults formatdown_options(reset = TRUE)  # Examine result formatdown_options(\"size\", \"decimal_mark\") #> $size #> NULL #>  #> $decimal_mark #> [1] \".\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"delimiters","dir":"Articles","previous_headings":"","what":"Delimiters","title":"Global settings","text":"Delimiters characters surround formatted expression R Markdown renders inline math expression. Sometimes default $ ... $ delimiters fail render correctly. encountered using kableExtra::kbl() .qmd document. solution, suggested MathJax consortium (Cervone, 2018), use delimiter pair \\( ... \\), hence built-alternate, delim = \"\\\\(\". Left right custom delimiters can assigned vector, e.g., c(\"\\\\[\", \"\\\\]\").  Examples.   Note using format_text() introduces additional markup inside delimiters. Details described Format text article.  Examples 1–4 (inline code chunks) render , \\(\\small 101300\\) \\(\\small 101300\\) \\(\\small \\mathrm{Hello\\ world!}\\) \\(\\small \\mathrm{Hello\\ world!}\\)","code":"x <- 101300 txt <- \"Hello world!\"  # 1. Numeric input, default delimiters format_dcml(x) #> [1] \"$101300$\"  # 2. Numeric input, alternate delimiters format_dcml(x, delim = \"\\\\(\") #> [1] \"\\\\(101300\\\\)\"  # 3. Character input, default delimiters format_text(txt) #> [1] \"$\\\\mathrm{Hello\\\\ world!}$\"  # 4. Character input, alternate delimiters format_text(txt, delim = \"\\\\(\") #> [1] \"\\\\(\\\\mathrm{Hello\\\\ world!}\\\\)\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"font-size","dir":"Articles","previous_headings":"","what":"Font size","title":"Global settings","text":"Font size set using LaTeX-style macros inside math-delimited expression. example, size = \"small\" (size = \"\\\\small\"), formatdown markup Avogadro constant extra backslashes necessary escape backslashes \\small \\times. size = NULL (default), size command added font size equivalent \"normalsize\".  Examples.  Examples 5–9 render , \\(\\scriptsize 101300\\) \\(\\small 101300\\) \\(\\small 6.022 \\times 10^{23}\\) \\(\\mathrm{Hello\\ world!}\\) \\(\\large \\mathrm{Hello\\ world!}\\)  Available sizes Comparing decimal notation, scientific notation, text possible font sizes (formatdown support sizes: tiny, footnotesize, Large, LARGE, Huge).","code":"\"$\\\\small 6.0221 \\\\times 10^{23}$\", # 5. Numeric input format_dcml(x, size = \"scriptsize\") #> [1] \"$\\\\scriptsize 101300$\"  # 6. Numeric input format_dcml(x, size = \"small\") #> [1] \"$\\\\small 101300$\"  # 7. Power-of-ten number using LaTeX-style size markup format_sci(6.0221e+23, size = \"\\\\small\") #> [1] \"$\\\\small 6.022 \\\\times 10^{23}$\"  # 8. Character input, default size format_text(txt) #> [1] \"$\\\\mathrm{Hello\\\\ world!}$\"  # 9. Character input format_text(txt, size = \"large\") #> [1] \"$\\\\large \\\\mathrm{Hello\\\\ world!}$\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"decimal-separator","dir":"Articles","previous_headings":"","what":"Decimal separator","title":"Global settings","text":"number written decimal form, decimal mark separates integer part fractional part. period dot (“.”) conventional decimal mark US, Australia, Canada (English-speaking), Mexico, UK, much eastern Asia, regions. comma (“,”) conventional decimal mark Brazil, Canada (French-speaking), much Europe Latin America, Russia, regions. decimal mark formatdown may reset locally function call globally using formatdown_options(); affected base R option OutDec.  Examples.  Examples 10 11 render , \\(\\small 3,1416\\) \\(\\small 1,6022 \\times 10^{-19}\\)","code":"# 10. Decimal markup x <- pi format_dcml(x, 5, decimal_mark = \",\") #> [1] \"$3,1416$\"  # 11. Power-of-ten markup y <- 1.602176634e-19 format_sci(y, 5, decimal_mark = \",\") #> [1] \"$1,6022 \\\\times 10^{-19}$\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"separating-digits","dir":"Articles","previous_headings":"","what":"Separating digits","title":"Global settings","text":"NIST recommends use thin space separate 4 digits left right decimal marker (Thompson & Taylor, 2022, p. 10.5.3): … digits separated groups three, counting decimal marker towards left right, use thin, fixed space. However, practice usually followed numbers four digits either side decimal marker except uniformity table desired. big_mark small_mark add horizontal-space characters inside math delimiters; big_mark integer portion small_mark fractional portion. possible values empty \"\" (default), \"thin\", thin-space macro \\\\\\\\,. interval arguments big_interval small_interval set number digits separated thin spaces big_mark small_mark empty. However, formatdown encode exemption 4-digit groups mentioned NIST quote .  Examples.  Examples 12–17 render , \\(\\small 1013\\) \\(\\small 1\\,013\\) \\(\\small 101\\,300\\) \\(\\small 0.00245\\,6\\) \\(\\small 0.002\\,456\\) \\(\\small 101\\,300.00245\\,6\\)","code":"w <- 1013 x <- 101300 y <- 0.002456 z <- x + y  # 12. 4-digit number, no space format_dcml(w) #> [1] \"$1013$\"  # 13. 4-digit number, with space format_dcml(w, big_mark = \"thin\") #> [1] \"$1\\\\,013$\"  # 14. Group digits to the left of the decimal format_dcml(x, big_mark = \"thin\") #> [1] \"$101\\\\,300$\"  # 15. Group digits to the right of the decimal format_dcml(y, small_mark = \"\\\\\\\\,\") #> [1] \"$0.00245\\\\,6$\"  # 16. Change the small interval format_dcml(y, small_mark = \"\\\\\\\\,\", small_interval = 3) #> [1] \"$0.002\\\\,456$\"  # 17. Group digits to the left and right of the decimal format_dcml(z, 12, big_mark = \"thin\", small_mark = \"thin\") #> [1] \"$101\\\\,300.00245\\\\,6$\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"preserving-text-spaces","dir":"Articles","previous_headings":"","what":"Preserving text spaces","title":"Global settings","text":"horizontal-space macro used preserve spaces text formatted format_text() well spaces within physical-unit strings format_numbers(). Without , inline math markup rendered R markdown document \\(\\qquad\\) \\(\\small\\mathrm{Math Text.}\\) preserve spaces, formatdown substitutes character string \\> space, producing output like following, backslashes escaped, rendered , \\(\\qquad\\) \\(\\small\\mathrm{\\>\\>Math\\>Text.}\\) backslashes must escaped, formatdown output \\(\\small\\mathtt{\\verb|\"\\\\>\"|}\\), argument value set user whitespace = \\(\\small\\mathtt{\\verb|\"\\\\\\\\>\"|}\\). One may also use \\(\\mathtt{\\small\\verb|\"\\\\\\\\:\"|}\\) \\(\\mathtt{\\small\\verb|\"\\\\\\\\ \"|}\\).  Examples.  Examples 18–20 render , \\(\\small \\mathrm{Hello\\ world!}\\) \\(\\small \\mathrm{Hello\\:world!}\\) \\(\\small \\mathrm{Hello\\ world!}\\)","code":"$\\mathrm{This Is Math Text.}$ \"$\\\\mathrm{This\\\\>Is\\\\>Math\\\\>Text.}$\" # 18. Character input, default space '\\>' format_text(txt, whitespace = \"\\\\\\\\>\") #> [1] \"$\\\\mathrm{Hello\\\\>world!}$\"  # 19. Character input, alternate space '\\:' format_text(txt, whitespace = \"\\\\\\\\:\") #> [1] \"$\\\\mathrm{Hello\\\\:world!}$\"  # 20. Character input, alternate space '\\ ' format_text(txt, whitespace = \"\\\\\\\\ \") #> [1] \"$\\\\mathrm{Hello\\\\ world!}$\""},{"path":"https://graphdr.github.io/formatdown/articles/global_settings.html","id":"applications","dir":"Articles","previous_headings":"","what":"Applications","title":"Global settings","text":"Example 21. example, format different columns data frame using decimal_mark, big_mark small_mark. Example 21.  Example 22. table, using power ten formatting. Example 22.  Example 23. metals data set includes columns text decimal power--ten numbers. Example 23.","code":"# Set options formatdown_options(decimal_mark = \",\", big_mark = \"thin\", small_mark = \"thin\")  # Use water data included with formatdown DT <- copy(water)[1:6]  # Examine the data frame DT[] #>      temp   dens   sp_wt       visc bulk_mod #>     <num>  <num>   <num>      <num>    <num> #> 1: 273.15 999.87 9808.70 0.00173360 2.02e+09 #> 2: 283.15 999.73 9807.33 0.00131050 2.10e+09 #> 3: 293.15 998.23 9792.67 0.00102120 2.18e+09 #> 4: 303.15 995.68 9767.60 0.00081743 2.25e+09 #> 5: 313.15 992.25 9733.95 0.00066988 2.28e+09 #> 6: 323.15 988.06 9692.90 0.00056046 2.29e+09  # Routine decimal formatting DT$temp <- format_dcml(DT$temp) DT$dens <- format_dcml(DT$dens)  # Omit big_mark spacing for 4 digits DT$sp_wt <- format_dcml(DT$sp_wt, 4, big_mark = \"\")  # Set significant digits (viscosity) to achieve a consistent string length DT[visc >= 0.001, temp_visc := format_dcml(visc, 5)] DT[visc < 0.001, temp_visc := format_dcml(visc, 4)] DT[, visc := temp_visc] DT[, temp_visc := NULL]  # Will appear with big_mark spacing, change from Pa to kPa DT$bulk_mod_kPa <- format_dcml(DT$bulk_mod/1000, 4) DT$bulk_mod <- NULL  knitr::kable(DT, align = \"r\", caption = \"Example 21.\") # Set package options to default values formatdown_options(reset = TRUE) # Use water data included with formatdown DT <- copy(water)[1:6]  # Routine decimal formatting cols <- c(\"temp\", \"dens\", \"sp_wt\") DT[, (cols) := lapply(.SD, function(x) format_dcml(x)), .SDcols = cols]  # Power of ten DT$bulk_mod <- format_engr(DT$bulk_mod, 3) DT$visc <- format_engr(DT$visc, 4, set_power = -3)  knitr::kable(DT, align = \"r\", caption = \"Example 22.\") # Use water data included with formatdown DT <- copy(metals)  # Examine the data frame DT[] #>            metal  dens  thrm_exp thrm_cond  elast_mod #>           <char> <num>     <num>     <num>      <num> #> 1: aluminum 6061  2700 2.430e-05    155.77 7.3084e+10 #> 2:        copper  8900 1.656e-05    392.88 1.1721e+11 #> 3:          lead 11340 5.274e-05     37.04 1.3790e+10 #> 4:      platinum 21450 9.000e-06     69.23 1.4686e+11 #> 5:    steel 1020  7850 1.134e-05     46.73 2.0684e+11 #> 6:      titanium  4850 9.360e-06      7.44 1.0204e+11  # Text DT$metal <- format_text(DT$metal)  # Decimal cols <- c(\"dens\", \"thrm_cond\") DT[, (cols) := lapply(.SD, function(x) format_dcml(x)), .SDcols = cols]  # Power of ten cols <- c(\"elast_mod\", \"thrm_exp\") DT[, (cols) := lapply(.SD, function(x) format_engr(x, 3)), .SDcols = cols]  knitr::kable(DT, align = \"lrrrr\", caption = \"Example 23.\")"},{"path":[]},{"path":"https://graphdr.github.io/formatdown/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Layton. Author, maintainer.","code":""},{"path":"https://graphdr.github.io/formatdown/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Layton R (2024). formatdown: Formatting Numbers 'rmarkdown' Documents. R package version 0.1.4.9001,  https://graphdr.github.io/formatdown/, https://CRAN.R-project.org/package=formatdown, https://github.com/graphdr/formatdown/.","code":"@Manual{,   title = {formatdown: Formatting Numbers in 'rmarkdown' Documents},   author = {Richard Layton},   year = {2024},   note = {R package version 0.1.4.9001,  https://graphdr.github.io/formatdown/, https://CRAN.R-project.org/package=formatdown},   url = {https://github.com/graphdr/formatdown/}, }"},{"path":[]},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our pledge","title":"Contributor code of conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our standards","title":"Contributor code of conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement responsibilities","title":"Contributor code of conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor code of conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor code of conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement midfield@purdue.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement guidelines","title":"Contributor code of conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement guidelines","what":"1. Correction","title":"Contributor code of conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement guidelines","what":"2. Warning","title":"Contributor code of conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement guidelines","what":"3. Temporary Ban","title":"Contributor code of conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement guidelines","what":"4. Permanent Ban","title":"Contributor code of conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://graphdr.github.io/formatdown/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor code of conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://graphdr.github.io/formatdown/index.html","id":"formatdown-","dir":"","previous_headings":"","what":"Formatting Numbers in rmarkdown Documents","title":"Formatting Numbers in rmarkdown Documents","text":"Formatting Numbers R Markdown Documents Provides small set tools formatting numbers R markdown documents (file type .Rmd .qmd). Converts numerical vector character strings power--ten form, decimal form, measurement-units form; math-delimited within quotation marks rendering inline equations. Useful rendering numerical scalars using inline R code chunks rendering numerical columns tables.","code":""},{"path":"https://graphdr.github.io/formatdown/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Formatting Numbers in rmarkdown Documents","text":"professional technical prose, large small numbers generally typeset using powers ten notation. example, Planck’s constant typeset 6.63 × 10−34 J/Hz rather familiar forms use communicating computers, 6.63*10^-34 6.63E-34. functions package help author R markdown document convert large small numbers character strings, formatted using powers--ten notation. addition, decimal numbers text can formatted font face size power--ten numbers consistent typeface across columns data table. Formatting tools include: format_numbers() Convert numeric vector math-delimited character vector numbers can formatted scientific engineering power--ten notation decimal form. format_sci() Convenience function. wrapper around format_numbers() scientific notation. format_engr() Convenience function. wrapper around format_numbers() engineering notation. format_dcml() Convenience function. wrapper around format_numbers() decimal notation. format_text() Convert character vector math-delimited character vector. Useful creating consistent typeface across columns table. formatdown_options() Global options provided arguments users likely prefer set document instead repeating every function call. example, users prefer comma decimal marker (“,”) throughout document.","code":""},{"path":"https://graphdr.github.io/formatdown/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Formatting Numbers in rmarkdown Documents","text":"Scalar values.   Typically rendered inline: , .Rmd .qmd output document, rendered using inline R code  Data frame.   Typically rendered table. independently format columns metals data frame included formatdown. Table 1: Properties metals.  Options.   users prefer comma decimal mark, argument can set using formatdown_options(), Using code format metals data yields, Table 2: Changing decimal mark  return default values,","code":"# Packages library(\"formatdown\") library(\"data.table\") library(\"knitr\") x <- 101300  # Scientific notation format_numbers(x, digits = 4, format = \"sci\") #> [1] \"$1.013 \\\\times 10^{5}$\"  # Engineering notation format_numbers(x, digits = 4, format = \"engr\") #> [1] \"$101.3 \\\\times 10^{3}$\"  # Decimal notation format_numbers(x, digits = 4, format = \"dcml\") #> [1] \"$101300$\"  # With measurement units units(x) <- \"Pa\" units(x) <- \"hPa\" format_dcml(x) #> [1] \"$1013\\\\ \\\\mathrm{hPa}$\" # View the data set metals #>            metal  dens  thrm_exp thrm_cond  elast_mod #>           <char> <num>     <num>     <num>      <num> #> 1: aluminum 6061  2700 2.430e-05    155.77 7.3084e+10 #> 2:        copper  8900 1.656e-05    392.88 1.1721e+11 #> 3:          lead 11340 5.274e-05     37.04 1.3790e+10 #> 4:      platinum 21450 9.000e-06     69.23 1.4686e+11 #> 5:    steel 1020  7850 1.134e-05     46.73 2.0684e+11 #> 6:      titanium  4850 9.360e-06      7.44 1.0204e+11  # First column in text format DT <- copy(metals) DT$metal <- format_text(DT$metal)  # Density and thermal conductivity in decimal form cols_we_want <- c(\"dens\", \"thrm_cond\") DT[, cols_we_want] <- lapply(DT[, ..cols_we_want], function(x) format_dcml(x, 3))  # Thermal expansion in engineering format DT$thrm_exp <- format_engr(DT$thrm_exp, 3)  # Elastic modulus in units form units(DT$elast_mod) <- \"Pa\" units(DT$elast_mod) <- \"GPa\" DT$elast_mod <- format_dcml(DT$elast_mod, 3)  # Render in document knitr::kable(DT, align = \"r\", caption = \"Table 1: Properties of metals.\", col.names = c(\"Metal\",     \"Density [kg/m$^3$]\", \"Therm. expan. [m/m K$^{-1}$]\", \"Therm. cond. [W/m K$^{-1}$]\",     \"Elastic modulus\")) formatdown_options(decimal_mark = \",\") formatdown_options(reset = TRUE)"},{"path":"https://graphdr.github.io/formatdown/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Formatting Numbers in rmarkdown Documents","text":"Install CRAN. development version can installed GitHub. suggest using “pak” package:","code":"install.packages(\"formatdown\") pak::pkg_install(\"graphdr/formatdown\")"},{"path":"https://graphdr.github.io/formatdown/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Formatting Numbers in rmarkdown Documents","text":"R (>= 3.5.0) data.table (>= 1.9.8)","code":""},{"path":"https://graphdr.github.io/formatdown/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Formatting Numbers in rmarkdown Documents","text":"provide feedback report bug, Use GitHub  Issues page. contribute formatdown, Please clone repo locally. Commit contribution separate branch. Submit pull request Participation open source project subject Code Conduct.","code":""},{"path":"https://graphdr.github.io/formatdown/index.html","id":"software-credits","dir":"","previous_headings":"","what":"Software credits","title":"Formatting Numbers in rmarkdown Documents","text":"R RStudio working environment rmarkdown knitr authoring tools data.table programmable syntax units handling physical units wrapr, checkmate, tinytest programming tools devtools pkgdown package building","code":""},{"path":"https://graphdr.github.io/formatdown/reference/air.html","id":null,"dir":"Reference","previous_headings":"","what":"Air density measurements — air","title":"Air density measurements — air","text":"table air properties room temperature, simulating multiple measurements approximately steady state,","code":""},{"path":"https://graphdr.github.io/formatdown/reference/air.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Air density measurements — air","text":"","code":"data(air, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/air.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Air density measurements — air","text":"Classes data.table data.frame:\t5 observations 7 variables: date Date, R class \"Date\", format YYYY-MM-DD. trial Character, label e. humidity Factor, low, medium, high. temperature Numeric, [K] pressure Numeric, atmospheric pressure [Pa] R Integer, gas constant           [J kg\\(^{-1}\\)K\\(^{-1}\\)] density Numeric, calculated air density        [kg m\\(^{-3}\\)]","code":""},{"path":"https://graphdr.github.io/formatdown/reference/air_meas.html","id":null,"dir":"Reference","previous_headings":"","what":"Air density measurements — air_meas","title":"Air density measurements — air_meas","text":"Table air properties room temperature pressure, simulating multiple measurements approximately steady state,","code":""},{"path":"https://graphdr.github.io/formatdown/reference/air_meas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Air density measurements — air_meas","text":"","code":"data(air_meas, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/air_meas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Air density measurements — air_meas","text":"Classes data.table data.frame:\t5 observations 7 variables: date \"Date\" class format \"YYYY-MM-DD\". trial Character, label \"\" \"e\". humid Factor, humidity, \"low\", \"med\", \"high.\" temp Numeric, measured temperature (K). pres Numeric, measured atmospheric pressure (Pa). sp_gas Numeric, specific gas constant mass form \\(R_{sp}\\), ideal gas reference value, (J kg\\(^{-1}\\)K\\(^{-1}\\)). dens Numeric, calculated air density \\(\\rho\\) = \\(p\\)\\(R_{sp}^{-1}\\)\\(T^{-1}\\) (kg m\\(^{-3}\\)).","code":""},{"path":"https://graphdr.github.io/formatdown/reference/atmos.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of standard atmosphere — atmos","title":"Properties of standard atmosphere — atmos","text":"Table atmospheric properties function altitude, sea level 1000 km.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/atmos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of standard atmosphere — atmos","text":"","code":"data(atmos, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/atmos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Properties of standard atmosphere — atmos","text":"Classes data.table data.frame: 9 observations 5 variables: alt Numeric, altitude (km) temp Numeric, air temperature (K) pres Numeric, atmospheric pressure (Pa) dens Numeric, air density (kg m\\(^{-3}\\)) sound Numeric, speed sound (m/s)","code":""},{"path":"https://graphdr.github.io/formatdown/reference/atmos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Properties of standard atmosphere — atmos","text":"Marks' Standard Handbook Mechanical Engineers 9/e (1987) E.. Avallone T. Baumeister (ed.), \"Table 4.2.2 International Standard Atmosphere\", pp. 4-38,  McGraw-Hill, NY.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/atmosphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of standard atmosphere — atmosphere","title":"Properties of standard atmosphere — atmosphere","text":"table atmospheric properties function altitude sea level approximately 14 km.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/atmosphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of standard atmosphere — atmosphere","text":"","code":"data(atmosphere, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/atmosphere.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Properties of standard atmosphere — atmosphere","text":"Classes data.table data.frame: 10 observations 5 variables: alt Numeric, altitude [m] temp Numeric, air temperature [K] pres Numeric, atmospheric pressure [Pa] dens Numeric, air density [kg m\\(^{-3}\\)] spd_snd Numeric, speed sound [m/s]","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package formatdown. — format_decimal","title":"Deprecated functions in package formatdown. — format_decimal","text":"functions listed deprecated. Alternative functions similar functionality mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package formatdown. — format_decimal","text":"","code":"format_decimal(x, digits = 4, ..., big_mark = NULL, delim = \"$\")  format_power(   x,   digits = 4,   ...,   format = NULL,   size = NULL,   omit_power = c(-1, 2),   set_power = NULL,   delim = \"$\" )  format_units(   x,   digits = 1,   unit = NULL,   ...,   unit_form = NULL,   big_mark = NULL )"},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-deprecated.html","id":"format-decimal","dir":"Reference","previous_headings":"","what":"format_decimal","title":"Deprecated functions in package formatdown. — format_decimal","text":"format_decimal(), use format_dcml() format_numbers(..., format = \"dcml\")","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-deprecated.html","id":"format-power","dir":"Reference","previous_headings":"","what":"format_power","title":"Deprecated functions in package formatdown. — format_decimal","text":"format_power(), use format_numbers(), format_sci() format_engr().","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-deprecated.html","id":"format-units","dir":"Reference","previous_headings":"","what":"format_units","title":"Deprecated functions in package formatdown. — format_decimal","text":"format_units(), use format_numbers() first assigning physical measurement units using units package.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-package.html","id":null,"dir":"Reference","previous_headings":"","what":"formatdown: Formatting Numbers in 'rmarkdown' Documents — formatdown-package","title":"formatdown: Formatting Numbers in 'rmarkdown' Documents — formatdown-package","text":"Provides small set tools formatting numbers R-markdown documents. Convert numerical vector character strings power--ten form, decimal form, measurement-units form; math-delimited rendering inline equations. Can also convert text math-delimited text match font face size math-delimited numbers. Useful rendering single numbers inline R code chunks rendering columns tables.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/formatdown-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"formatdown: Formatting Numbers in 'rmarkdown' Documents — formatdown-package","text":"Maintainer: Richard Layton graphdoctor@gmail.com","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set function arguments via options — formatdown_options","title":"Get and set function arguments via options — formatdown_options","text":"Changes default values function arguments affect markup appearance formatdown results.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set function arguments via options — formatdown_options","text":"","code":"formatdown_options(..., reset = FALSE)"},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set function arguments via options — formatdown_options","text":"... One name = value pairs set values; one quoted option names get values. reset Logical vector length 1; TRUE, reset options default values.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set function arguments via options — formatdown_options","text":"Nothing; used side-effect.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set function arguments via options — formatdown_options","text":"Global options provided arguments users likely prefer set document instead repeating every function call. example, users prefer comma decimal marker (\",\") throughout document. Globally-set arguments can overridden locally assigning function call. arguments can set function follows: delim:          Character, length 1 2, define left right math markup delimiters. default setting, delim = \"$\", produces left right delimiters $...$. alternate built-setting, delim = \"\\(\", produces left right delimiters \\\\( ... \\\\). Custom delimiters can assigned vector length 2 left right delimiter symbols, e.g., c(\"\\\\[\", \"\\\\]\"). Special characters typically must escaped. size:           Character, length 1, assign font size. empty, adds font size macro markup inside math delimiters. Possible values \"scriptsize\", \"small\", \"normalsize\", \"large\", \"huge\". One may also assign equivalent LaTeX-style markup , e.g., \"\\\\scriptsize\", \"\\\\small\", etc. Default NULL. decimal_mark:   Character, length 1, assign decimal marker. Possible values period \".\" (default) comma \",\". Passed formatC(decimal.mark). big_mark:       Character, length 1, used mark every big_interval number digits left decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(big.mark). big_interval:   Integer, length 1, defines number digits (default 3) groups separated big_mark. Passed formatC(big.interval). small_mark:     Character, length 1, used mark every small_interval number digits right decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(small.mark). small_interval: Integer, length 1, defines number digits (default 5) groups separated small_mark. Passed formatC(small.interval). whitespace:     Character, length 1, define LaTeX-style math-mode macro preserve horizontal space words text physical-unit abbreviations formatting numbers class \"units\". Default \"\\\\\\\\ \". Alternatives include \"\\\\\\\\:\" \"\\\\\\\\>\".","code":""},{"path":"https://graphdr.github.io/formatdown/reference/formatdown_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set function arguments via options — formatdown_options","text":"","code":"# Show all options formatdown_options() #> $delim #> [1] \"$\" #>  #> $size #> NULL #>  #> $decimal_mark #> [1] \".\" #>  #> $big_mark #> [1] \"\" #>  #> $big_interval #> [1] 3 #>  #> $small_mark #> [1] \"\" #>  #> $small_interval #> [1] 5 #>  #> $whitespace #> [1] \"\\\\\\\\ \" #>   # Store existing settings, including any changes made by the user old_settings <- formatdown_options()  # View one option formatdown_options()$delim #> [1] \"$\"  # View multiple options formatdown_options(\"size\", \"delim\") #> $size #> NULL #>  #> $delim #> [1] \"$\" #>   # Change options formatdown_options(size = \"small\", delim = \"\\\\(\") formatdown_options(\"size\", \"delim\") #> $size #> [1] \"small\" #>  #> $delim #> [1] \"\\\\(\" #>   # Reset to default values formatdown_options(reset = TRUE) formatdown_options(\"size\", \"delim\") #> $size #> NULL #>  #> $delim #> [1] \"$\" #>   # Reset options to those before this example was run do.call(formatdown_options, old_settings)  # Option effects  # delim x <- 101300 format_dcml(x) #> [1] \"$101300$\" format_dcml(x, delim = \"\\\\(\") #> [1] \"\\\\(101300\\\\)\"  # size format_dcml(x, size = \"small\") #> [1] \"$\\\\small 101300$\" format_dcml(x, size = \"\\\\small\") #> [1] \"$\\\\small 101300$\"  # decimal_mark y <- 6.02214076E+10 format_sci(y, 5, decimal_mark = \".\") #> [1] \"$6.0221 \\\\times 10^{10}$\" format_sci(y, 5, decimal_mark = \",\") #> [1] \"$6,0221 \\\\times 10^{10}$\"  # big_mark format_dcml(y, 9) #> [1] \"$60221407600$\" format_dcml(y, 9, big_mark = \"thin\") #> [1] \"$60\\\\,221\\\\,407\\\\,600$\" format_dcml(y, 9, big_mark = \"\\\\\\\\,\") #> [1] \"$60\\\\,221\\\\,407\\\\,600$\"  # big_interval format_dcml(y, 9, big_mark = \"thin\", big_interval = 3) #> [1] \"$60\\\\,221\\\\,407\\\\,600$\" format_dcml(y, 9, big_mark = \"thin\", big_interval = 5) #> [1] \"$6\\\\,02214\\\\,07600$\"  # small_mark z <- 1.602176634e-8 format_sci(z, 10) #> [1] \"$1.602176634 \\\\times 10^{-8}$\" format_sci(z, 10, small_mark = \"thin\") #> [1] \"$1.60217\\\\,6634 \\\\times 10^{-8}$\" format_sci(z, 10, small_mark = \"\\\\\\\\,\") #> [1] \"$1.60217\\\\,6634 \\\\times 10^{-8}$\" format_engr(z, 10, small_mark = \"thin\") #> [1] \"$16.02176\\\\,634 \\\\times 10^{-9}$\"  # small_interval format_sci(z, 10, small_mark = \"thin\", small_interval = 3) #> [1] \"$1.602\\\\,176\\\\,634 \\\\times 10^{-8}$\" format_sci(z, 10, small_mark = \"thin\", small_interval = 5) #> [1] \"$1.60217\\\\,6634 \\\\times 10^{-8}$\" format_engr(z, 10, small_mark = \"thin\", small_interval = 5) #> [1] \"$16.02176\\\\,634 \\\\times 10^{-9}$\"  # whitespace in text p <- \"Hello world!\" format_text(p, whitespace = \"\\\\\\\\:\") #> [1] \"$\\\\mathrm{Hello\\\\:world!}$\"  # whitespace in physical units expression x <- pi units(x) <- \"m/s\" format_dcml(x, whitespace = \"\\\\\\\\:\") #> [1] \"$3.142\\\\:\\\\mathrm{m\\\\:s^{-1}}$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":null,"dir":"Reference","previous_headings":"","what":"Format decimal notation — format_dcml","title":"Format decimal notation — format_dcml","text":"Convert numeric vector character vector numbers formatted decimal form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format decimal notation — format_dcml","text":"","code":"format_dcml(   x,   digits = 4,   ...,   delim = formatdown_options(\"delim\"),   size = formatdown_options(\"size\"),   decimal_mark = formatdown_options(\"decimal_mark\"),   big_mark = formatdown_options(\"big_mark\"),   big_interval = formatdown_options(\"big_interval\"),   small_mark = formatdown_options(\"small_mark\"),   small_interval = formatdown_options(\"small_interval\"),   whitespace = formatdown_options(\"whitespace\") )"},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format decimal notation — format_dcml","text":"x Number numbers formatted. Can single number, vector, column data frame. digits Integer 1 20 controls number significant digits printed numeric values. Passed signif(). Default 4. ... used values; forces subsequent arguments referable name. delim Character, length 1 2, define left right math markup delimiters. default setting, delim = \"$\", produces left right delimiters $...$. alternate built-setting, delim = \"\\(\", produces left right delimiters \\\\( ... \\\\). Custom delimiters can assigned vector length 2 left right delimiter symbols, e.g., c(\"\\\\[\", \"\\\\]\"). Special characters typically must escaped. size Character, length 1, assign font size. empty, adds font size macro markup inside math delimiters. Possible values \"scriptsize\", \"small\", \"normalsize\", \"large\", \"huge\". One may also assign equivalent LaTeX-style markup , e.g., \"\\\\scriptsize\", \"\\\\small\", etc. Default NULL. decimal_mark Character, length 1, assign decimal marker. Possible values period \".\" (default) comma \",\". Passed formatC(decimal.mark). big_mark Character, length 1, used mark every big_interval number digits left decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(big.mark). big_interval Integer, length 1, defines number digits (default 3) groups separated big_mark. Passed formatC(big.interval). small_mark Character, length 1, used mark every small_interval number digits right decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(small.mark). small_interval Integer, length 1, defines number digits (default 5) groups separated small_mark. Passed formatC(small.interval). whitespace Character, length 1, define LaTeX-style math-mode macro preserve horizontal space words text physical-unit abbreviations formatting numbers class \"units\". Default \"\\\\\\\\ \". Alternatives include \"\\\\\\\\:\" \"\\\\\\\\>\".","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format decimal notation — format_dcml","text":"character vector numbers formatted decimal form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format decimal notation — format_dcml","text":"format_dcml() wrapper general function format_numbers(). defaults defined formatdown_options(), users may reassign arguments locally function call globally using formatdown_options(). Arguments dots (...) must referred name.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_dcml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format decimal notation — format_dcml","text":"","code":"# input: single number x <- 6.0221E+23 format_numbers(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  # input: units class x <- 103400 units(x) <- \"N m2 C-2\" format_numbers(x) #> [1] \"$103.4 \\\\times 10^{3}\\\\ \\\\mathrm{N\\\\ m^{2}\\\\ C^{-2}}$\"  # input: vector data(\"metals\", package = \"formatdown\") x <- metals$dens format_numbers(x) #> [1] \"$2.700 \\\\times 10^{3}$\" \"$8.900 \\\\times 10^{3}$\" \"$11.34 \\\\times 10^{3}$\" #> [4] \"$21.45 \\\\times 10^{3}$\" \"$7.850 \\\\times 10^{3}$\" \"$4.850 \\\\times 10^{3}$\"  # significant digits x <- 9.75358e+5 format_numbers(x, 2) #> [1] \"$980 \\\\times 10^{3}$\" format_numbers(x, 3) #> [1] \"$975 \\\\times 10^{3}$\" format_numbers(x, 4) #> [1] \"$975.4 \\\\times 10^{3}$\"  # format & wrappers: format_engr(), format_sci(), format_dcml() x <- 6.0221E+23 format_numbers(x, format = \"engr\") #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  format_numbers(x, format = \"sci\") #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\"  x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_dcml(x) #> [1] \"$103400$\"  # input: data frame x <- metals[, c(\"thrm_exp\", \"thrm_cond\")] as.data.frame(apply(x, 2, format_sci, digits = 3)) #>                 thrm_exp thrm_cond #> 1 $2.43 \\\\times 10^{-5}$     $156$ #> 2 $1.66 \\\\times 10^{-5}$     $393$ #> 3 $5.27 \\\\times 10^{-5}$    $37.0$ #> 4 $9.00 \\\\times 10^{-6}$    $69.2$ #> 5 $1.13 \\\\times 10^{-5}$    $46.7$ #> 6 $9.36 \\\\times 10^{-6}$    $7.44$  # omit_power x <- 103400 format_sci(x, omit_power = c(-1, 2)) # default #> [1] \"$1.034 \\\\times 10^{5}$\" format_sci(x, omit_power = c(-1, 5)) #> [1] \"$103400$\" format_sci(x, omit_power = 5) # equivalent to omit_power = c(5, 5) #> [1] \"$103400$\" x <- 1.2 format_sci(x, omit_power = NULL) #> [1] \"$1.200 \\\\times 10^{0}$\"  # set_power format_sci(x, set_power = NULL) # default #> [1] \"$1.200$\" format_sci(x, set_power = 3) #> [1] \"$0.001200 \\\\times 10^{3}$\"  # set_power overrides format x <- 6.0221E+23 format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\"  # set_power overrides omit_power x <- 101300 format_sci(x, omit_power = 5) #> [1] \"$101300$\" format_sci(x, omit_power = 5, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\" format_sci(x, omit_power = 2) #> [1] \"$1.013 \\\\times 10^{5}$\" format_sci(x, omit_power = 2, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\"  # decimal format ignores set_power x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_numbers(x, format = \"dcml\", set_power = 3) #> [1] \"$103400$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Format decimal or integer values — format_decimal-deprecated","title":"Format decimal or integer values — format_decimal-deprecated","text":"function deprecated special case new format_numbers() function. addition, new function includes features available deprecated function.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format decimal or integer values — format_decimal-deprecated","text":"","code":"format_decimal(x, digits, ..., big_mark, delim)"},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format decimal or integer values — format_decimal-deprecated","text":"x Numeric vector formatted. digits Numeric scalar, decimal places report, integer 0 20. Zero returns integer. ... used, force later arguments used name. big_mark Character. empty, used mark every three digits decimal point. Applied big.mark argument formatC(). delim Character vector (length 1 2) defining delimiters marking inline math. Possible values include \"$\" \"\\\\(\", create appropriate left right delimiters. Alternatively, left right can defined explicitly character vector length two, e.g., c(\"$\", \"$\") c(\"\\\\(\", \"\\\\)\"). Custom delimiters can assigned suit markup environment. Use argument name.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format decimal or integer values — format_decimal-deprecated","text":"character vector numbers represented decimal notation delimited inline math markup.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format decimal or integer values — format_decimal-deprecated","text":"Convert elements numerical vector character strings numbers formatted using decimal notation delimited rendering inline equations R Markdown document. Given number, numerical vector, numerical column data frame, format_decimal() converts numbers character strings form, \"$$\", number decimal notation. user can specify number decimal places. Delimiters inline math markup can edited necessary. default argument fails, \"\\\\(\" alternative available. using custom delimiter suit markup environment, sure escape special symbols.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Format decimal or integer values — format_decimal","title":"Format decimal or integer values — format_decimal","text":"Convert elements numerical vector character strings numbers formatted using decimal notation delimited rendering inline equations R Markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format decimal or integer values — format_decimal","text":"","code":"format_decimal(x, digits = 4, ..., big_mark = NULL, delim = \"$\")"},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format decimal or integer values — format_decimal","text":"x Numeric vector formatted. digits Numeric scalar, decimal places report, integer 0 20. Zero returns integer. ... used, force later arguments used name. big_mark Character. empty, used mark every three digits decimal point. Applied big.mark argument formatC(). delim Character vector (length 1 2) defining delimiters marking inline math. Possible values include \"$\" \"\\\\(\", create appropriate left right delimiters. Alternatively, left right can defined explicitly character vector length two, e.g., c(\"$\", \"$\") c(\"\\\\(\", \"\\\\)\"). Custom delimiters can assigned suit markup environment. Use argument name.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format decimal or integer values — format_decimal","text":"character vector following properties: Numbers represented integer decimal notation. Elements delimited inline math markup.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format decimal or integer values — format_decimal","text":"Given number, numerical vector, numerical column data frame, format_decimal() converts numbers character strings form, \"$$\", number decimal notation. user can specify number decimal places. Delimiters inline math markup can edited necessary. default argument fails, \"\\\\(\" alternative available. using custom delimiter suit markup environment, sure escape special symbols.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format decimal or integer values — format_decimal","text":"","code":"# Digits x <- c(12300400.1234, 456000) format_decimal(x, digits = 0) #> [1] \"$12300400$\" \"$456000$\"   format_decimal(x, digits = 1) #> [1] \"$12300400.1$\" \"$456000.0$\"   format_decimal(x, digits = 2) #> [1] \"$12300400.12$\" \"$456000.00$\"    # Big mark format_decimal(x, 0, big_mark = \",\") #> [1] \"$12,300,400$\" \"$456,000$\"     # Inline math delimiters x <- c(1.654321, 0.065432) format_decimal(x) #> [1] \"$1.6543$\" \"$0.0654$\" format_decimal(x, 3, delim = \"$\") #> [1] \"$1.654$\" \"$0.065$\" format_decimal(x, 3, delim = c(\"$\", \"$\")) #> [1] \"$1.654$\" \"$0.065$\" format_decimal(x, 3, delim = \"\\\\(\") #> [1] \"\\\\(1.654\\\\)\" \"\\\\(0.065\\\\)\" format_decimal(x, 3, delim = c(\"\\\\(\", \"\\\\)\")) #> [1] \"\\\\(1.654\\\\)\" \"\\\\(0.065\\\\)\"  # LaTeX-style display equation delimiters format_decimal(x, 3, delim = c(\"\\\\[\", \"\\\\]\")) #> [1] \"\\\\[1.654\\\\]\" \"\\\\[0.065\\\\]\"  # Apply to columns of a data frame (data.table syntax) DT <- atmos[, .(temp, sound)] DT[, lapply(.SD, function(x) format_decimal(x, 1))] #>       temp   sound #>     <char>  <char> #> 1: $288.1$ $340.3$ #> 2: $223.2$ $299.5$ #> 3: $216.7$ $295.1$ #> 4: $226.5$ $301.7$ #> 5: $250.3$ $317.2$ #> 6: $270.6$ $329.8$ #> 7: $247.0$ $315.1$ #> 8: $219.6$ $297.1$ #> 9: $198.6$ $282.5$"},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":null,"dir":"Reference","previous_headings":"","what":"Format engineering notation — format_engr","title":"Format engineering notation — format_engr","text":"Convert numeric vector character vector numbers formatted power--ten notation engineering form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format engineering notation — format_engr","text":"","code":"format_engr(   x,   digits = 4,   ...,   omit_power = c(-1, 2),   set_power = NULL,   delim = formatdown_options(\"delim\"),   size = formatdown_options(\"size\"),   decimal_mark = formatdown_options(\"decimal_mark\"),   small_mark = formatdown_options(\"small_mark\"),   small_interval = formatdown_options(\"small_interval\"),   whitespace = formatdown_options(\"whitespace\") )"},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format engineering notation — format_engr","text":"x Number numbers formatted. Can single number, vector, column data frame. digits Integer 1 20 controls number significant digits printed numeric values. Passed signif(). Default 4. ... used values; forces subsequent arguments referable name. omit_power Numeric vector c(p, q) p <= q, specifying range exponents power--ten notation omitted either scientific engineering format. Default c(-1, 2). single value assigned, .e., omit_power = p, argument interpreted c(p, p). NULL NA, elements formatted power--ten notation. Argument overridden specifying set_power decimal notation. set_power Integer, length 1. Formats values x power--ten exponent. Default NULL. Overrides format omit_power arguments. delim Character, length 1 2, define left right math markup delimiters. default setting, delim = \"$\", produces left right delimiters $...$. alternate built-setting, delim = \"\\(\", produces left right delimiters \\\\( ... \\\\). Custom delimiters can assigned vector length 2 left right delimiter symbols, e.g., c(\"\\\\[\", \"\\\\]\"). Special characters typically must escaped. size Character, length 1, assign font size. empty, adds font size macro markup inside math delimiters. Possible values \"scriptsize\", \"small\", \"normalsize\", \"large\", \"huge\". One may also assign equivalent LaTeX-style markup , e.g., \"\\\\scriptsize\", \"\\\\small\", etc. Default NULL. decimal_mark Character, length 1, assign decimal marker. Possible values period \".\" (default) comma \",\". Passed formatC(decimal.mark). small_mark Character, length 1, used mark every small_interval number digits right decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(small.mark). small_interval Integer, length 1, defines number digits (default 5) groups separated small_mark. Passed formatC(small.interval). whitespace Character, length 1, define LaTeX-style math-mode macro preserve horizontal space words text physical-unit abbreviations formatting numbers class \"units\". Default \"\\\\\\\\ \". Alternatives include \"\\\\\\\\:\" \"\\\\\\\\>\".","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format engineering notation — format_engr","text":"character vector numbers formatted power--ten notation engineering form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format engineering notation — format_engr","text":"engineering notation, exponents multiples three. format_engr() wrapper general function format_numbers(). defaults defined formatdown_options(), users may reassign arguments locally function call globally using formatdown_options(). Arguments dots (...) must referred name.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_engr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format engineering notation — format_engr","text":"","code":"# input: single number x <- 6.0221E+23 format_numbers(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  # input: units class x <- 103400 units(x) <- \"N m2 C-2\" format_numbers(x) #> [1] \"$103.4 \\\\times 10^{3}\\\\ \\\\mathrm{N\\\\ m^{2}\\\\ C^{-2}}$\"  # input: vector data(\"metals\", package = \"formatdown\") x <- metals$dens format_numbers(x) #> [1] \"$2.700 \\\\times 10^{3}$\" \"$8.900 \\\\times 10^{3}$\" \"$11.34 \\\\times 10^{3}$\" #> [4] \"$21.45 \\\\times 10^{3}$\" \"$7.850 \\\\times 10^{3}$\" \"$4.850 \\\\times 10^{3}$\"  # significant digits x <- 9.75358e+5 format_numbers(x, 2) #> [1] \"$980 \\\\times 10^{3}$\" format_numbers(x, 3) #> [1] \"$975 \\\\times 10^{3}$\" format_numbers(x, 4) #> [1] \"$975.4 \\\\times 10^{3}$\"  # format & wrappers: format_engr(), format_sci(), format_dcml() x <- 6.0221E+23 format_numbers(x, format = \"engr\") #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  format_numbers(x, format = \"sci\") #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\"  x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_dcml(x) #> [1] \"$103400$\"  # input: data frame x <- metals[, c(\"thrm_exp\", \"thrm_cond\")] as.data.frame(apply(x, 2, format_sci, digits = 3)) #>                 thrm_exp thrm_cond #> 1 $2.43 \\\\times 10^{-5}$     $156$ #> 2 $1.66 \\\\times 10^{-5}$     $393$ #> 3 $5.27 \\\\times 10^{-5}$    $37.0$ #> 4 $9.00 \\\\times 10^{-6}$    $69.2$ #> 5 $1.13 \\\\times 10^{-5}$    $46.7$ #> 6 $9.36 \\\\times 10^{-6}$    $7.44$  # omit_power x <- 103400 format_sci(x, omit_power = c(-1, 2)) # default #> [1] \"$1.034 \\\\times 10^{5}$\" format_sci(x, omit_power = c(-1, 5)) #> [1] \"$103400$\" format_sci(x, omit_power = 5) # equivalent to omit_power = c(5, 5) #> [1] \"$103400$\" x <- 1.2 format_sci(x, omit_power = NULL) #> [1] \"$1.200 \\\\times 10^{0}$\"  # set_power format_sci(x, set_power = NULL) # default #> [1] \"$1.200$\" format_sci(x, set_power = 3) #> [1] \"$0.001200 \\\\times 10^{3}$\"  # set_power overrides format x <- 6.0221E+23 format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\"  # set_power overrides omit_power x <- 101300 format_sci(x, omit_power = 5) #> [1] \"$101300$\" format_sci(x, omit_power = 5, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\" format_sci(x, omit_power = 2) #> [1] \"$1.013 \\\\times 10^{5}$\" format_sci(x, omit_power = 2, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\"  # decimal format ignores set_power x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_numbers(x, format = \"dcml\", set_power = 3) #> [1] \"$103400$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numbers — format_numbers","title":"Format numbers — format_numbers","text":"Convert numeric vector character vector numbers formatted power--ten notation scientific engineering form delimited rendering inline equations R markdown document. Decimal numbers can similarly formatted, without power--ten notation.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numbers — format_numbers","text":"","code":"format_numbers(   x,   digits = 4,   format = \"engr\",   ...,   omit_power = c(-1, 2),   set_power = NULL,   delim = formatdown_options(\"delim\"),   size = formatdown_options(\"size\"),   decimal_mark = formatdown_options(\"decimal_mark\"),   big_mark = formatdown_options(\"big_mark\"),   big_interval = formatdown_options(\"big_interval\"),   small_mark = formatdown_options(\"small_mark\"),   small_interval = formatdown_options(\"small_interval\"),   whitespace = formatdown_options(\"whitespace\") )"},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numbers — format_numbers","text":"x Number numbers formatted. Can single number, vector, column data frame. digits Integer 1 20 controls number significant digits printed numeric values. Passed signif(). Default 4. format Character, length 1, defines type notation. Possible values \"engr\" (default) engineering power--ten notation, \"sci\" scientific power--ten notation, \"dcml\" decimal notation. ... used values; forces subsequent arguments referable name. omit_power Numeric vector c(p, q) p <= q, specifying range exponents power--ten notation omitted either scientific engineering format. Default c(-1, 2). single value assigned, .e., omit_power = p, argument interpreted c(p, p). NULL NA, elements formatted power--ten notation. Argument overridden specifying set_power decimal notation. set_power Integer, length 1. Formats values x power--ten exponent. Default NULL. Overrides format omit_power arguments. delim Character, length 1 2, define left right math markup delimiters. default setting, delim = \"$\", produces left right delimiters $...$. alternate built-setting, delim = \"\\(\", produces left right delimiters \\\\( ... \\\\). Custom delimiters can assigned vector length 2 left right delimiter symbols, e.g., c(\"\\\\[\", \"\\\\]\"). Special characters typically must escaped. size Character, length 1, assign font size. empty, adds font size macro markup inside math delimiters. Possible values \"scriptsize\", \"small\", \"normalsize\", \"large\", \"huge\". One may also assign equivalent LaTeX-style markup , e.g., \"\\\\scriptsize\", \"\\\\small\", etc. Default NULL. decimal_mark Character, length 1, assign decimal marker. Possible values period \".\" (default) comma \",\". Passed formatC(decimal.mark). big_mark Character, length 1, used mark every big_interval number digits left decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(big.mark). big_interval Integer, length 1, defines number digits (default 3) groups separated big_mark. Passed formatC(big.interval). small_mark Character, length 1, used mark every small_interval number digits right decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(small.mark). small_interval Integer, length 1, defines number digits (default 5) groups separated small_mark. Passed formatC(small.interval). whitespace Character, length 1, define LaTeX-style math-mode macro preserve horizontal space words text physical-unit abbreviations formatting numbers class \"units\". Default \"\\\\\\\\ \". Alternatives include \"\\\\\\\\:\" \"\\\\\\\\>\".","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numbers — format_numbers","text":"character vector numbers formatted power--ten decimal notation delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format numbers — format_numbers","text":"Given number, numerical vector, numerical column data frame, format_numbers() converts numbers character strings form, \"$\\\\times 10^{n}$\", coefficient specified number significant digits n exponent. used decimal notation, format_numbers() converts numbers character strings form \"$$\". Powers--ten notation omitted range exponents via omit_power numbers specified converted decimal notation. example, default omit_power = c(-1, 2) formats numbers 0.123, 1.23, 12.3, 123 decimal form. cancel exceptions convert numbers powers--ten notation, set omit_power argument NULL NA. Delimiters inline math markup can edited necessary. default argument fails, try using \"\\\\(\" alternative. using custom delimiter suit markup environment, sure escape special symbols. inputs class \"units\" (created units package), math-text macro form \\\\mathrm{<units_string>} appended formatted numerical value inside math delimiters. Arguments dots (...) must referred name.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numbers — format_numbers","text":"","code":"# input: single number x <- 6.0221E+23 format_numbers(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  # input: units class x <- 103400 units(x) <- \"N m2 C-2\" format_numbers(x) #> [1] \"$103.4 \\\\times 10^{3}\\\\ \\\\mathrm{N\\\\ m^{2}\\\\ C^{-2}}$\"  # input: vector data(\"metals\", package = \"formatdown\") x <- metals$dens format_numbers(x) #> [1] \"$2.700 \\\\times 10^{3}$\" \"$8.900 \\\\times 10^{3}$\" \"$11.34 \\\\times 10^{3}$\" #> [4] \"$21.45 \\\\times 10^{3}$\" \"$7.850 \\\\times 10^{3}$\" \"$4.850 \\\\times 10^{3}$\"  # significant digits x <- 9.75358e+5 format_numbers(x, 2) #> [1] \"$980 \\\\times 10^{3}$\" format_numbers(x, 3) #> [1] \"$975 \\\\times 10^{3}$\" format_numbers(x, 4) #> [1] \"$975.4 \\\\times 10^{3}$\"  # format & wrappers: format_engr(), format_sci(), format_dcml() x <- 6.0221E+23 format_numbers(x, format = \"engr\") #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  format_numbers(x, format = \"sci\") #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\"  x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_dcml(x) #> [1] \"$103400$\"  # input: data frame x <- metals[, c(\"thrm_exp\", \"thrm_cond\")] as.data.frame(apply(x, 2, format_sci, digits = 3)) #>                 thrm_exp thrm_cond #> 1 $2.43 \\\\times 10^{-5}$     $156$ #> 2 $1.66 \\\\times 10^{-5}$     $393$ #> 3 $5.27 \\\\times 10^{-5}$    $37.0$ #> 4 $9.00 \\\\times 10^{-6}$    $69.2$ #> 5 $1.13 \\\\times 10^{-5}$    $46.7$ #> 6 $9.36 \\\\times 10^{-6}$    $7.44$  # omit_power x <- 103400 format_sci(x, omit_power = c(-1, 2)) # default #> [1] \"$1.034 \\\\times 10^{5}$\" format_sci(x, omit_power = c(-1, 5)) #> [1] \"$103400$\" format_sci(x, omit_power = 5) # equivalent to omit_power = c(5, 5) #> [1] \"$103400$\" x <- 1.2 format_sci(x, omit_power = NULL) #> [1] \"$1.200 \\\\times 10^{0}$\"  # set_power format_sci(x, set_power = NULL) # default #> [1] \"$1.200$\" format_sci(x, set_power = 3) #> [1] \"$0.001200 \\\\times 10^{3}$\"  # set_power overrides format x <- 6.0221E+23 format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\"  # set_power overrides omit_power x <- 101300 format_sci(x, omit_power = 5) #> [1] \"$101300$\" format_sci(x, omit_power = 5, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\" format_sci(x, omit_power = 2) #> [1] \"$1.013 \\\\times 10^{5}$\" format_sci(x, omit_power = 2, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\"  # decimal format ignores set_power x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_numbers(x, format = \"dcml\", set_power = 3) #> [1] \"$103400$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_power-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Format powers of ten — format_power-deprecated","title":"Format powers of ten — format_power-deprecated","text":"function deprecated special case new format_numbers() function. addition, new function includes features available deprecated function.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format powers of ten — format_power-deprecated","text":"","code":"format_power(x, digits, ..., format, size, omit_power, set_power, delim)"},{"path":"https://graphdr.github.io/formatdown/reference/format_power-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format powers of ten — format_power-deprecated","text":"x Numeric vector formatted. digits Numeric scalar 1 20 (inclusive) defining number significant digits result. ... used, force later arguments used name. format Character. Possible values \"engr\" (default) engineering notation \"sci\" scientific notation. Use argument  name. Can also set global option, example, options(formatdown.power.format = \"sci\") can overwritten individual function call. size Font size. Possible values \"scriptsize\", \"small\" (default), \"normalsize\", \"large\", \"huge\". correspond selected LaTeX font size values. Can also set global option, example, options(formatdown.font.size = \"normalsize\") can overwritten individual function call. omit_power Numeric vector c(p, q) specifying range exponents power ten notation omitted, p <= q. NULL numbers formatted powers ten notation. Use argument name. set_power Numeric scalar integer. Assigned exponent overrides format. Default NULL makes notation changes. Use argument name. delim Character vector (length 1 2) defining delimiters marking inline math. Possible values include \"$\" \"\\\\(\", create appropriate left right delimiters. Alternatively, left right can defined explicitly character vector length two, e.g., c(\"$\", \"$\") c(\"\\\\(\", \"\\\\)\"). Custom delimiters can assigned suit markup environment. Use argument name.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format powers of ten — format_power-deprecated","text":"character vector numbers represented powers ten notation delimited inline math markup.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format powers of ten — format_power-deprecated","text":"Convert elements numerical vector character strings numbers formatted using powers--ten notation scientific engineering form delimited rendering inline equations R Markdown document. Given number, numerical vector, numerical column data frame, format_power() converts numbers character strings form, \"$\\\\times 10^{n}$\", coefficient n exponent. string includes markup delimiters $...$ rendering inline equation R Markdown Quarto Markdown document. user can specify either scientific engineering format number significant digits. Powers--ten notation omitted range exponents via omit_power numbers converted character strings form, \"$$\", number decimal notation. default omit_power = c(-1, 2) formats numbers 0.123, 1.23, 12.3, 123 decimal form. cancel exceptions convert numbers powers--ten notation, set omit_power argument NULL. Delimiters inline math markup can edited necessary. default argument fails, try using \"\\\\(\" alternative. using custom delimiter suit markup environment, sure escape special symbols.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Format powers of ten — format_power","title":"Format powers of ten — format_power","text":"Convert elements numerical vector character strings numbers formatted using powers--ten notation scientific engineering form delimited rendering inline equations R Markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format powers of ten — format_power","text":"","code":"format_power(   x,   digits = 4,   ...,   format = NULL,   size = NULL,   omit_power = c(-1, 2),   set_power = NULL,   delim = \"$\" )"},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format powers of ten — format_power","text":"x Numeric vector formatted. digits Numeric scalar 1 20 (inclusive) defining number significant digits result. ... used, force later arguments used name. format Character. Possible values \"engr\" (default) engineering notation \"sci\" scientific notation. Use argument  name. Can also set global option, example, options(formatdown.power.format = \"sci\") can overwritten individual function call. size Font size. Possible values \"scriptsize\", \"small\" (default), \"normalsize\", \"large\", \"huge\". correspond selected LaTeX font size values. Can also set global option, example, options(formatdown.font.size = \"normalsize\") can overwritten individual function call. omit_power Numeric vector c(p, q) specifying range exponents power ten notation omitted, p <= q. NULL numbers formatted powers ten notation. Use argument name. set_power Numeric scalar integer. Assigned exponent overrides format. Default NULL makes notation changes. Use argument name. delim Character vector (length 1 2) defining delimiters marking inline math. Possible values include \"$\" \"\\\\(\", create appropriate left right delimiters. Alternatively, left right can defined explicitly character vector length two, e.g., c(\"$\", \"$\") c(\"\\\\(\", \"\\\\)\"). Custom delimiters can assigned suit markup environment. Use argument name.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format powers of ten — format_power","text":"character vector following properties: Numbers represented powers ten notation except exponents range specified omit_power Elements delimited inline math markup.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format powers of ten — format_power","text":"Given number, numerical vector, numerical column data frame, format_power() converts numbers character strings form, \"$\\\\times 10^{n}$\", coefficient n exponent. string includes markup delimiters $...$ rendering inline equation R Markdown Quarto Markdown document. user can specify either scientific engineering format number significant digits. Powers--ten notation omitted range exponents via omit_power numbers converted character strings form, \"$$\", number decimal notation. default omit_power = c(-1, 2) formats numbers 0.123, 1.23, 12.3, 123 decimal form. cancel exceptions convert numbers powers--ten notation, set omit_power argument NULL. Delimiters inline math markup can edited necessary. default argument fails, try using \"\\\\(\" alternative. using custom delimiter suit markup environment, sure escape special symbols.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format powers of ten — format_power","text":"","code":"# Scalar value format_power(101100, digits = 4) #> [1] \"$\\\\small 101.1 \\\\times 10^{3}$\"  # Vector value x <- c(1.2222e-6, 2.3333e-5, 3.4444e-4, 4.1111e-3, 5.2222e-2, 6.3333e-1,        7.4444e+0, 8.1111e+1, 9.2222e+2, 1.3333e+3, 2.4444e+4, 3.1111e+5, 4.2222e+6) format_power(x) #>  [1] \"$\\\\small 1.222 \\\\times 10^{-6}$\" \"$\\\\small 23.33 \\\\times 10^{-6}$\" #>  [3] \"$\\\\small 344.4 \\\\times 10^{-6}$\" \"$\\\\small 4.111 \\\\times 10^{-3}$\" #>  [5] \"$\\\\small 52.22 \\\\times 10^{-3}$\" \"$\\\\small 0.6333$\"                #>  [7] \"$\\\\small 7.444$\"                 \"$\\\\small 81.11$\"                 #>  [9] \"$\\\\small 922.2$\"                 \"$\\\\small 1.333 \\\\times 10^{3}$\"  #> [11] \"$\\\\small 24.44 \\\\times 10^{3}$\"  \"$\\\\small 311.1 \\\\times 10^{3}$\"  #> [13] \"$\\\\small 4.222 \\\\times 10^{6}$\"   # Compare significant digits format_power(x[1], 3) #> [1] \"$\\\\small 1.22 \\\\times 10^{-6}$\" format_power(x[1], 4) #> [1] \"$\\\\small 1.222 \\\\times 10^{-6}$\"  # Compare format type format_power(x[3], format = \"engr\") #> [1] \"$\\\\small 344.4 \\\\times 10^{-6}$\" format_power(x[3], format = \"sci\") #> [1] \"$\\\\small 3.444 \\\\times 10^{-4}$\"  # Compare set_power results format_power(x[3], set_power = -5) #> [1] \"$\\\\small 34.44 \\\\times 10^{-5}$\" format_power(x[3], set_power = -4) #> [1] \"$\\\\small 3.444 \\\\times 10^{-4}$\" format_power(x[3], set_power = -3) #> [1] \"$\\\\small 0.3444 \\\\times 10^{-3}$\"  # Compare omit_power range format_power(x[6], omit_power = c(-1, 2)) #> [1] \"$\\\\small 0.6333$\" format_power(x[6], omit_power = c(0, 2)) #> [1] \"$\\\\small 633.3 \\\\times 10^{-3}$\" format_power(x[8]) #> [1] \"$\\\\small 81.11$\" format_power(x[8], omit_power = NULL) #> [1] \"$\\\\small 81.11 \\\\times 10^{0}$\"  # Apply to columns of a data frame (data.table syntax) y <- x[1:6] z <- x[8:13] DT <- data.table::data.table(y, z) DT[, lapply(.SD, function(x) format_power(x))] #>                                  y                              z #>                             <char>                         <char> #> 1: $\\\\small 1.222 \\\\times 10^{-6}$                $\\\\small 81.11$ #> 2: $\\\\small 23.33 \\\\times 10^{-6}$                $\\\\small 922.2$ #> 3: $\\\\small 344.4 \\\\times 10^{-6}$ $\\\\small 1.333 \\\\times 10^{3}$ #> 4: $\\\\small 4.111 \\\\times 10^{-3}$ $\\\\small 24.44 \\\\times 10^{3}$ #> 5: $\\\\small 52.22 \\\\times 10^{-3}$ $\\\\small 311.1 \\\\times 10^{3}$ #> 6:                $\\\\small 0.6333$ $\\\\small 4.222 \\\\times 10^{6}$"},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":null,"dir":"Reference","previous_headings":"","what":"Format scientific notation — format_sci","title":"Format scientific notation — format_sci","text":"Convert numeric vector character vector numbers formatted power--ten notation scientific form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format scientific notation — format_sci","text":"","code":"format_sci(   x,   digits = 4,   ...,   omit_power = c(-1, 2),   set_power = NULL,   delim = formatdown_options(\"delim\"),   size = formatdown_options(\"size\"),   decimal_mark = formatdown_options(\"decimal_mark\"),   small_mark = formatdown_options(\"small_mark\"),   small_interval = formatdown_options(\"small_interval\"),   whitespace = formatdown_options(\"whitespace\") )"},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format scientific notation — format_sci","text":"x Number numbers formatted. Can single number, vector, column data frame. digits Integer 1 20 controls number significant digits printed numeric values. Passed signif(). Default 4. ... used values; forces subsequent arguments referable name. omit_power Numeric vector c(p, q) p <= q, specifying range exponents power--ten notation omitted either scientific engineering format. Default c(-1, 2). single value assigned, .e., omit_power = p, argument interpreted c(p, p). NULL NA, elements formatted power--ten notation. Argument overridden specifying set_power decimal notation. set_power Integer, length 1. Formats values x power--ten exponent. Default NULL. Overrides format omit_power arguments. delim Character, length 1 2, define left right math markup delimiters. default setting, delim = \"$\", produces left right delimiters $...$. alternate built-setting, delim = \"\\(\", produces left right delimiters \\\\( ... \\\\). Custom delimiters can assigned vector length 2 left right delimiter symbols, e.g., c(\"\\\\[\", \"\\\\]\"). Special characters typically must escaped. size Character, length 1, assign font size. empty, adds font size macro markup inside math delimiters. Possible values \"scriptsize\", \"small\", \"normalsize\", \"large\", \"huge\". One may also assign equivalent LaTeX-style markup , e.g., \"\\\\scriptsize\", \"\\\\small\", etc. Default NULL. decimal_mark Character, length 1, assign decimal marker. Possible values period \".\" (default) comma \",\". Passed formatC(decimal.mark). small_mark Character, length 1, used mark every small_interval number digits right decimal marker improve readability. Possible values empty \"\" (default) \"thin\" produce LaTeX-style thin, horizontal space. One may also assign thin-space markup \"\\\\\\\\,\". Passed formatC(small.mark). small_interval Integer, length 1, defines number digits (default 5) groups separated small_mark. Passed formatC(small.interval). whitespace Character, length 1, define LaTeX-style math-mode macro preserve horizontal space words text physical-unit abbreviations formatting numbers class \"units\". Default \"\\\\\\\\ \". Alternatives include \"\\\\\\\\:\" \"\\\\\\\\>\".","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format scientific notation — format_sci","text":"character vector numbers formatted power--ten notation scientific form delimited rendering inline equations R markdown document.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format scientific notation — format_sci","text":"format_sci() wrapper general function format_numbers(). defaults defined formatdown_options(), users may reassign arguments locally function call globally using formatdown_options(). Arguments dots (...) must referred name.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_sci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format scientific notation — format_sci","text":"","code":"# input: single number x <- 6.0221E+23 format_numbers(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  # input: units class x <- 103400 units(x) <- \"N m2 C-2\" format_numbers(x) #> [1] \"$103.4 \\\\times 10^{3}\\\\ \\\\mathrm{N\\\\ m^{2}\\\\ C^{-2}}$\"  # input: vector data(\"metals\", package = \"formatdown\") x <- metals$dens format_numbers(x) #> [1] \"$2.700 \\\\times 10^{3}$\" \"$8.900 \\\\times 10^{3}$\" \"$11.34 \\\\times 10^{3}$\" #> [4] \"$21.45 \\\\times 10^{3}$\" \"$7.850 \\\\times 10^{3}$\" \"$4.850 \\\\times 10^{3}$\"  # significant digits x <- 9.75358e+5 format_numbers(x, 2) #> [1] \"$980 \\\\times 10^{3}$\" format_numbers(x, 3) #> [1] \"$975 \\\\times 10^{3}$\" format_numbers(x, 4) #> [1] \"$975.4 \\\\times 10^{3}$\"  # format & wrappers: format_engr(), format_sci(), format_dcml() x <- 6.0221E+23 format_numbers(x, format = \"engr\") #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\"  format_numbers(x, format = \"sci\") #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\"  x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_dcml(x) #> [1] \"$103400$\"  # input: data frame x <- metals[, c(\"thrm_exp\", \"thrm_cond\")] as.data.frame(apply(x, 2, format_sci, digits = 3)) #>                 thrm_exp thrm_cond #> 1 $2.43 \\\\times 10^{-5}$     $156$ #> 2 $1.66 \\\\times 10^{-5}$     $393$ #> 3 $5.27 \\\\times 10^{-5}$    $37.0$ #> 4 $9.00 \\\\times 10^{-6}$    $69.2$ #> 5 $1.13 \\\\times 10^{-5}$    $46.7$ #> 6 $9.36 \\\\times 10^{-6}$    $7.44$  # omit_power x <- 103400 format_sci(x, omit_power = c(-1, 2)) # default #> [1] \"$1.034 \\\\times 10^{5}$\" format_sci(x, omit_power = c(-1, 5)) #> [1] \"$103400$\" format_sci(x, omit_power = 5) # equivalent to omit_power = c(5, 5) #> [1] \"$103400$\" x <- 1.2 format_sci(x, omit_power = NULL) #> [1] \"$1.200 \\\\times 10^{0}$\"  # set_power format_sci(x, set_power = NULL) # default #> [1] \"$1.200$\" format_sci(x, set_power = 3) #> [1] \"$0.001200 \\\\times 10^{3}$\"  # set_power overrides format x <- 6.0221E+23 format_engr(x) #> [1] \"$602.2 \\\\times 10^{21}$\" format_engr(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\" format_sci(x) #> [1] \"$6.022 \\\\times 10^{23}$\" format_sci(x, set_power = 24L) #> [1] \"$0.6022 \\\\times 10^{24}$\"  # set_power overrides omit_power x <- 101300 format_sci(x, omit_power = 5) #> [1] \"$101300$\" format_sci(x, omit_power = 5, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\" format_sci(x, omit_power = 2) #> [1] \"$1.013 \\\\times 10^{5}$\" format_sci(x, omit_power = 2, set_power = 2) #> [1] \"$1013 \\\\times 10^{2}$\"  # decimal format ignores set_power x <- 103400 format_numbers(x, format = \"dcml\") #> [1] \"$103400$\" format_numbers(x, format = \"dcml\", set_power = 3) #> [1] \"$103400$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Format text — format_text","title":"Format text — format_text","text":"Convert character vector \"math text\" delimited rendering inline equations R markdown document. Particularly useful matching font face character columns numerical columns table.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format text — format_text","text":"","code":"format_text(   x,   face = \"plain\",   ...,   size = formatdown_options(\"size\"),   delim = formatdown_options(\"delim\"),   whitespace = formatdown_options(\"whitespace\") )"},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format text — format_text","text":"x Vector formatted. face Font face. Determines font face macro inside math delimiters. Possible values \"plain\" (default), \"italic\", \"bold\", \"sans\", \"mono\". One may assign instead corresponding LaTeX-style markup , e.g., \\\\mathrm, \\\\mathit, \\\\mathbf, \\\\mathsf, \\\\mathtt. ... used, force later arguments used name. size, delim, whitespace Used format math-delimited character strings. details, see help page formatdown_options().","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format text — format_text","text":"character vector elements delimited inline math markup plain, italic, sans serif, bold, monospace font face.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format text — format_text","text":"Given scalar, vector, data frame column, format_text() converts argument character string form \"$\\\\mathxx{}$\" element formatted \\\\mathxx determines font face: plain type set \\\\mathrm; italic \\\\mathit; bold \\\\mathbf; sans serif \\\\mathsf; monospace (typewriter text) \\\\mathtt. strings include markup delimiters $...$ rendering (R markdown Quarto markdown document) inline equation.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format text — format_text","text":"","code":"# Text vector  # default face = \"plain\" x <- air_meas$humid format_text(x) #> [1] \"$\\\\mathrm{low}$\"  \"$\\\\mathrm{high}$\" \"$\\\\mathrm{med}$\"  \"$\\\\mathrm{low}$\"  #> [5] \"$\\\\mathrm{high}$\"  # equivalently format_text(x, face = \"plain\") #> [1] \"$\\\\mathrm{low}$\"  \"$\\\\mathrm{high}$\" \"$\\\\mathrm{med}$\"  \"$\\\\mathrm{low}$\"  #> [5] \"$\\\\mathrm{high}$\"  # input vector x <- c(\"Hello world!\", \"Goodbye blues!\") format_text(x) #> [1] \"$\\\\mathrm{Hello\\\\ world!}$\"   \"$\\\\mathrm{Goodbye\\\\ blues!}$\"  # argument coerced to character string if possible format_text(c(1.2, 2.3, 3.4)) #> [1] \"$\\\\mathrm{1.2}$\" \"$\\\\mathrm{2.3}$\" \"$\\\\mathrm{3.4}$\" format_text(x = NA) #> [1] \"$\\\\mathrm{NA}$\" format_text(x = c(TRUE, FALSE, TRUE)) #> [1] \"$\\\\mathrm{TRUE}$\"  \"$\\\\mathrm{FALSE}$\" \"$\\\\mathrm{TRUE}$\"   # numbers as strings are rendered as-is format_text(x = c(\"1.2E-3\", \"3.4E+0\", \"5.6E+3\")) #> [1] \"$\\\\mathrm{1.2E-3}$\" \"$\\\\mathrm{3.4E+0}$\" \"$\\\\mathrm{5.6E+3}$\"  # other font faces format_text(x, face = \"italic\") #> [1] \"$\\\\mathit{Hello\\\\ world!}$\"   \"$\\\\mathit{Goodbye\\\\ blues!}$\" format_text(x, face = \"bold\") #> [1] \"$\\\\mathbf{Hello\\\\ world!}$\"   \"$\\\\mathbf{Goodbye\\\\ blues!}$\" format_text(x, face = \"sans\") #> [1] \"$\\\\mathsf{Hello\\\\ world!}$\"   \"$\\\\mathsf{Goodbye\\\\ blues!}$\" format_text(x, face = \"mono\") #> [1] \"$\\\\mathtt{Hello\\\\ world!}$\"   \"$\\\\mathtt{Goodbye\\\\ blues!}$\""},{"path":"https://graphdr.github.io/formatdown/reference/format_units-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values with measurement units — format_units-deprecated","title":"Format values with measurement units — format_units-deprecated","text":"function deprecated special case format_numbers() function. Users finalize manipulation units (using units package) invoking formatdown function.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values with measurement units — format_units-deprecated","text":"","code":"format_units(x, digits, unit, ..., unit_form, big_mark)"},{"path":"https://graphdr.github.io/formatdown/reference/format_units-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values with measurement units — format_units-deprecated","text":"x Vector class numeric class units. digits Numeric scalar, positive integer. Applied digits argument base::format(). Enough decimal places included smallest magnitude value many significant digits. unit Character scalar, units label compatible 'units' package. x class numeric, transform class units unit measurement units. x class units, convert unit measurement units. empty, existing class units retained. ... used, force later arguments used name. unit_form Character scalar. Possible values \"standard\" (default) \"implicit\" (implicit exponent form). standard form, units related arithmetic symbols multiplication, division, powers, e.g., \"kg/m^3\" \"W/(m*K)\". implicit exponent form, symbols separated spaces numbers represent exponents, e.g., \"kg m-3\" \"W m-1 K-1\". big_mark Character. Applied big.mark argument base::format(). Default \"\". period selected big_mark, decimal mark changed comma.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values with measurement units — format_units-deprecated","text":"character vector numbers appended measurement units.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format values with measurement units — format_units-deprecated","text":"Format vector numbers character strings measurement units appended via 'units' package. function wrapper units::as_units() base::format(). Numeric class input converted units class. Units class input, convertible, converted specified measurement units; none specified, existing measurement units retained. result cases converted class character using base::format() preset arguments: trim = TRUE scientific = FALSE. output form \"[u]\", number decimal notation u measurement units label.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values with measurement units — format_units","title":"Format values with measurement units — format_units","text":"Format vector numbers character strings measurement units appended via 'units' package.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values with measurement units — format_units","text":"","code":"format_units(   x,   digits = 1,   ...,   unit = NULL,   unit_form = NULL,   big_mark = NULL )"},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values with measurement units — format_units","text":"x Vector class numeric class units. digits Numeric scalar, positive integer. Applied digits argument base::format(). Enough decimal places included smallest magnitude value many significant digits. ... used, force later arguments used name. unit Character scalar, units label compatible 'units' package. x class numeric, transform class units unit measurement units. x class units, convert unit measurement units. empty, existing class units retained. unit_form Character scalar. Possible values \"standard\" (default) \"implicit\" (implicit exponent form). standard form, units related arithmetic symbols multiplication, division, powers, e.g., \"kg/m^3\" \"W/(m*K)\". implicit exponent form, symbols separated spaces numbers represent exponents, e.g., \"kg m-3\" \"W m-1 K-1\". big_mark Character. Applied big.mark argument base::format(). Default \"\". period selected big_mark, decimal mark changed comma.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values with measurement units — format_units","text":"character vector numbers appended measurement units.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format values with measurement units — format_units","text":"function wrapper units::as_units() base::format(). Numeric class input converted units class. Units class input, convertible, converted specified measurement units; none specified, existing measurement units retained. result cases converted class character using base::format() preset arguments: trim = TRUE scientific = FALSE. output form \"[u]\", number decimal notation u measurement units label.","code":""},{"path":[]},{"path":"https://graphdr.github.io/formatdown/reference/format_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values with measurement units — format_units","text":"","code":"# Scalar value, class numeric x <- 101300 format_units(x, unit = \"Pa\") #> [1] \"101300 [Pa]\"  # Scalar value, class units x <- 101300 units(x) <- \"Pa\" format_units(x, unit = \"hPa\") #> [1] \"1013 [hPa]\" format_units(x, digits = 3, unit = \"psi\") #> [1] \"14.7 [psi]\"  # Vectors (atmos and metals data included in formatdown) x <- atmos$dens units(x) <- \"kg/m^3\" format_units(x, unit = \"g/m^3\") #> [1] \"1230.00 [g/m^3]\" \"414.00 [g/m^3]\"  \"88.90 [g/m^3]\"   \"18.40 [g/m^3]\"   #> [5] \"4.00 [g/m^3]\"    \"1.03 [g/m^3]\"    \"0.31 [g/m^3]\"    \"0.08 [g/m^3]\"    #> [9] \"0.02 [g/m^3]\"    format_units(x, unit = \"g/m^3\", unit_form = \"implicit\") #> [1] \"1230.00 [g m-3]\" \"414.00 [g m-3]\"  \"88.90 [g m-3]\"   \"18.40 [g m-3]\"   #> [5] \"4.00 [g m-3]\"    \"1.03 [g m-3]\"    \"0.31 [g m-3]\"    \"0.08 [g m-3]\"    #> [9] \"0.02 [g m-3]\"     x <- atmos$pres units(x) <- \"Pa\" format_units(x, big_mark = \",\") #> [1] \"101,300 [Pa]\" \"26,500 [Pa]\"  \"5,529 [Pa]\"   \"1,197 [Pa]\"   \"287 [Pa]\"     #> [6] \"80 [Pa]\"      \"22 [Pa]\"      \"5 [Pa]\"       \"1 [Pa]\"       format_units(x, unit = \"hPa\") #> [1] \"1013.00 [hPa]\" \"265.00 [hPa]\"  \"55.29 [hPa]\"   \"11.97 [hPa]\"   #> [5] \"2.87 [hPa]\"    \"0.80 [hPa]\"    \"0.22 [hPa]\"    \"0.05 [hPa]\"    #> [9] \"0.01 [hPa]\"     x <- metals$thrm_cond units(x) <- \"W m-1 K-1\" format_units(x, digits = 2) #> [1] \"155.8 [W/K/m]\" \"392.9 [W/K/m]\" \"37.0 [W/K/m]\"  \"69.2 [W/K/m]\"  #> [5] \"46.7 [W/K/m]\"  \"7.4 [W/K/m]\"   format_units(x, digits = 2, unit_form = \"implicit\") #> [1] \"155.8 [W K-1 m-1]\" \"392.9 [W K-1 m-1]\" \"37.0 [W K-1 m-1]\"  #> [4] \"69.2 [W K-1 m-1]\"  \"46.7 [W K-1 m-1]\"  \"7.4 [W K-1 m-1]\""},{"path":"https://graphdr.github.io/formatdown/reference/metals.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of metals — metals","title":"Properties of metals — metals","text":"Table mechanical thermal properties selected metals.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/metals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of metals — metals","text":"","code":"data(metals, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/metals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Properties of metals — metals","text":"Classes data.table data.frame:\t6 observations  5 variables: metal Character, name material dens Numeric, density (kg m\\(^{-3}\\)) thrm_exp Numeric, coefficient thermal expansion (m m\\(^{-1}\\)K\\(^{-1}\\)) thrm_cond Numeric, thermal conductivity (W m\\(^{-1}\\)K\\(^{-1}\\)) elast_mod Numeric, modulus elasticity (Pa)","code":""},{"path":"https://graphdr.github.io/formatdown/reference/metals.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Properties of metals — metals","text":"Marks' Standard Handbook Mechanical Engineers 9/e (1987) E.. Avallone T. Baumeister (ed.), \"Basic Properties Several Metals\", pp. 6-11,  McGraw-Hill, NY.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/water.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of water — water","title":"Properties of water — water","text":"Table water properties atmospheric pressure function temperature.","code":""},{"path":"https://graphdr.github.io/formatdown/reference/water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of water — water","text":"","code":"data(water, package = \"formatdown\")"},{"path":"https://graphdr.github.io/formatdown/reference/water.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Properties of water — water","text":"Classes data.table data.frame:\t11 observations 5 variables: temp Numeric, temperature (K) dens Numeric, density (kg m\\(^{-3}\\)) sp_wt Numeric, specific weight (N m\\(^{-3}\\)) visc Numeric, dynamic viscosity (Pa s) bulk_mod Numeric, bulk modulus (Pa)","code":""},{"path":"https://graphdr.github.io/formatdown/reference/water.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Properties of water — water","text":"E. Maurer E . Embry (2022) hydraulics: Basic Pipe Open Channel Hydraulics, R package ver. 0.6.0, https://edm44.github.io/hydraulics/.","code":""},{"path":"https://graphdr.github.io/formatdown/news/index.html","id":"formatdown-014900x-development","dir":"Changelog","previous_headings":"","what":"formatdown 0.1.4.900x (development)","title":"formatdown 0.1.4.900x (development)","text":"2024–05–24 Change default whitespace argument render correctly README page GitHub","code":""},{"path":"https://graphdr.github.io/formatdown/news/index.html","id":"formatdown-014","dir":"Changelog","previous_headings":"","what":"formatdown 0.1.4","title":"formatdown 0.1.4","text":"2024–05–06 added formatdown_options() set global options, including ability change decimal marker comma instead period. deprecated format_decimal(), format_power(), format_units() added format_numbers() convenience wrappers format_sci(), format_engr(), format_dcml() replace deprecated functions take advantage new global options edited format_text() retain spaces character input updated examples, tests, vignettes reflect changes","code":""},{"path":"https://graphdr.github.io/formatdown/news/index.html","id":"formatdown-013","dir":"Changelog","previous_headings":"","what":"formatdown 0.1.3","title":"formatdown 0.1.3","text":"2024–03–14 add format_text() function add size argument format_power() add signif() format_power() enforce significant digits output applying formatC() correct issue omit_power() argument correct issue numbers < machine eps add package alias update tests vignettes reflect changes","code":""},{"path":"https://graphdr.github.io/formatdown/news/index.html","id":"formatdown-012","dir":"Changelog","previous_headings":"","what":"formatdown 0.1.2","title":"formatdown 0.1.2","text":"2023–06–21 Add arguments delim set_power format_power(). Fixed bug remove extra spaces added formatC(). Add data sets atmos, metals, water. Rename density data set air_meas. Add format_decimal() vignette. Add format_units() vignette.","code":""},{"path":"https://graphdr.github.io/formatdown/news/index.html","id":"formatdown-011","dir":"Changelog","previous_headings":"","what":"formatdown 0.1.1","title":"formatdown 0.1.1","text":"2022–11–21 Initial CRAN release","code":""}]
